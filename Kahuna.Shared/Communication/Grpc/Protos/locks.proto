syntax = "proto3";

service Locker {
  rpc TryLock (GrpcTryLockRequest) returns (GrpcTryLockResponse);
  rpc TryExtendLock (GrpcExtendLockRequest) returns (GrpcExtendLockResponse);
  rpc Unlock (GrpcUnlockRequest) returns (GrpcUnlockResponse);
  rpc GetLock (GrpcGetLockRequest) returns (GrpcGetLockResponse);
  rpc BatchClientLockRequests (stream GrpcBatchClientLockRequest) returns (stream GrpcBatchClientLockResponse);
}

message GrpcTryLockRequest {
  string Resource = 1;
  bytes Owner = 2;
  int32 ExpiresMs = 3;
  GrpcLockDurability Durability = 4;
}

message GrpcTryLockResponse {
  optional string ServedFrom = 1;
  GrpcLockResponseType Type = 2;
  int64 FencingToken = 3;
}

message GrpcExtendLockRequest {
  string Resource = 1;
  optional bytes Owner = 2;
  int32 ExpiresMs = 3;
  GrpcLockDurability Durability = 4;
}

message GrpcExtendLockResponse {
  optional string ServedFrom = 1;
  GrpcLockResponseType Type = 2;
  int64 FencingToken = 3;
}

message GrpcUnlockRequest {
  string Resource = 1;
  optional bytes Owner = 2;
  GrpcLockDurability Durability = 3;
}

message GrpcUnlockResponse {
  optional string ServedFrom = 1;
  GrpcLockResponseType Type = 2;
}

message GrpcGetLockRequest {
  string Resource = 1;
  GrpcLockDurability durability = 2;
}

message GrpcGetLockResponse {
  optional string ServedFrom = 1;
  GrpcLockResponseType Type = 2;
  optional bytes Owner = 3;
  int64 ExpiresPhysical = 4;
  uint32 ExpiresCounter = 5;
  int64 FencingToken = 6;
}

message GrpcBatchClientLockRequest {
  GrpcLockClientBatchType Type = 1;
  int32 RequestId = 2;
  oneof payload {
    GrpcTryLockRequest TryLock = 3;
    GrpcUnlockRequest Unlock = 4;
    GrpcExtendLockRequest ExtendLock = 5;
    GrpcGetLockRequest GetLock = 6;
  }
}

message GrpcBatchClientLockResponse
{
  GrpcLockClientBatchType Type = 1;
  int32 RequestId = 2;
  oneof payload {
    GrpcTryLockResponse TryLock = 3;
    GrpcUnlockResponse Unlock = 4;
    GrpcExtendLockResponse ExtendLock = 5;
    GrpcGetLockResponse GetLock = 6;
  }
}

enum GrpcLockClientBatchType {
  TYPE_NONE = 0;
  TYPE_TRY_LOCK = 1;
  TYPE_EXTEND_LOCK = 2;
  TYPE_UNLOCK = 3;
  TYPE_GET_LOCK = 4;
}

enum GrpcLockResponseType {
  LOCK_RESPONSE_TYPE_LOCKED = 0;
  LOCK_RESPONSE_TYPE_BUSY = 1;
  LOCK_RESPONSE_TYPE_EXTENDED = 2;
  LOCK_RESPONSE_TYPE_UNLOCKED = 3;
  LOCK_RESPONSE_TYPE_GOT = 4;
  LOCK_RESPONSE_TYPE_ERRORED = 99;
  LOCK_RESPONSE_TYPE_INVALID_INPUT = 100;
  LOCK_RESPONSE_TYPE_MUST_RETRY = 101;
  LOCK_RESPONSE_TYPE_LOCK_DOES_NOT_EXIST = 102;
  LOCK_RESPONSE_TYPE_INVALID_OWNER = 103;
  LOCK_RESPONSE_TYPE_ABORTED = 104;
}

enum GrpcLockDurability {
  LOCK_DURABILITY_EPHEMERAL = 0;
  LOCK_DURABILITY_PERSISTENT = 1;  
}