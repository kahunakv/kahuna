// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 4/16/2025 1:10:30 PM
// Input file <ScriptParser/ScriptParser.Language.grammar.y - 4/16/2025 1:09:59 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Kahuna.Server.ScriptParser
{
internal enum Token {error=2,EOF=3,TOR=4,TAND=5,TLIKE=6,
    TILIKE=7,TEQUALS=8,TNOTEQUALS=9,TDOUBLEEQUALS=10,TLESSTHAN=11,TGREATERTHAN=12,
    TLESSTHANEQUALS=13,TGREATERTHANEQUALS=14,TADD=15,TMINUS=16,TMULT=17,TDIV=18,
    TNOT=19,LPAREN=20,RPAREN=21,TCOMMA=22,LBRACE=23,RBRACE=24,
    TDOUBLEQUALS=25,TBEGIN=26,TROLLBACK=27,TCOMMIT=28,TLET=29,TSET=30,
    TGET=31,TESET=32,TEGET=33,TDELETE=34,TEDELETE=35,TEXTEND=36,
    TEEXTEND=37,TEXISTS=38,TEEXISTS=39,TIF=40,TELSE=41,TTHEN=42,
    TEND=43,TNX=44,TXX=45,TEX=46,TCMP=47,TCMPREV=48,
    TTHROW=49,TFOUND=50,TRETURN=51,TSLEEP=52,TDIGIT=53,TFLOAT=54,
    TSTRING=55,TIDENTIFIER=56,TESCIDENTIFIER=57,TPLACEHOLDER=58,TTRUE=59,TFALSE=60,
    TNULL=61,TAT=62,TPREFIX=63,TBY=64};

internal partial struct ValueType
{ 
        public NodeAst n;
        public string s;
        public int l;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal partial class scriptParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[125];
  private static State[] states = new State[202];
  private static string[] nonTerms = new string[] {
      "stmt_list", "$accept", "stmt", "set_stmt", "eset_stmt", "get_stmt", "eget_stmt", 
      "exists_stmt", "eexists_stmt", "delete_stmt", "edelete_stmt", "extend_stmt", 
      "eextend_stmt", "get_by_prefix_stmt", "eget_by_prefix_stmt", "let_stmt", 
      "if_stmt", "begin_stmt", "commit_stmt", "rollback_stmt", "return_stmt", 
      "sleep_stmt", "throw_stmt", "key_name", "expression", "set_cmp", "int", 
      "set_not_exists", "identifier", "placeholder", "begin_options", "begin_option", 
      "simple_expr", "fcall_expr", "float", "string", "boolean", "null", "fcall_argument_list", 
      "fcall_argument_item", };

  static scriptParser() {
    states[0] = new State(new int[]{30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-1,1,-3,188,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[1] = new State(new int[]{3,2,30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-3,3,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-4);
    states[5] = new State(new int[]{56,60,58,62},new int[]{-24,6,-29,78,-30,79});
    states[6] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,7,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[7] = new State(new int[]{46,12,8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,47,74,48,76,44,15,45,16,3,-24,30,-24,32,-24,31,-24,29,-24,33,-24,38,-24,39,-24,34,-24,35,-24,36,-24,37,-24,40,-24,26,-24,28,-24,27,-24,51,-24,52,-24,49,-24,43,-24,41,-24},new int[]{-26,8,-28,17});
    states[8] = new State(new int[]{46,9,3,-25,30,-25,32,-25,31,-25,29,-25,33,-25,38,-25,39,-25,34,-25,35,-25,36,-25,37,-25,40,-25,26,-25,28,-25,27,-25,51,-25,52,-25,49,-25,43,-25,41,-25});
    states[9] = new State(new int[]{53,11},new int[]{-27,10});
    states[10] = new State(-27);
    states[11] = new State(-119);
    states[12] = new State(new int[]{53,11},new int[]{-27,13});
    states[13] = new State(new int[]{44,15,45,16,3,-26,30,-26,32,-26,31,-26,29,-26,33,-26,38,-26,39,-26,34,-26,35,-26,36,-26,37,-26,40,-26,26,-26,28,-26,27,-26,51,-26,52,-26,49,-26,43,-26,41,-26},new int[]{-28,14});
    states[14] = new State(-28);
    states[15] = new State(-30);
    states[16] = new State(-31);
    states[17] = new State(-29);
    states[18] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,19,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[19] = new State(new int[]{8,-80,10,-80,9,-80,11,24,12,26,13,28,14,30,5,-80,4,-80,15,36,16,38,17,40,18,42,46,-80,47,-80,48,-80,44,-80,45,-80,3,-80,30,-80,32,-80,31,-80,29,-80,33,-80,38,-80,39,-80,34,-80,35,-80,36,-80,37,-80,40,-80,26,-80,28,-80,27,-80,51,-80,52,-80,49,-80,43,-80,41,-80,21,-80,22,-80,42,-80});
    states[20] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,21,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[21] = new State(new int[]{8,-81,10,-81,9,-81,11,24,12,26,13,28,14,30,5,-81,4,-81,15,36,16,38,17,40,18,42,46,-81,47,-81,48,-81,44,-81,45,-81,3,-81,30,-81,32,-81,31,-81,29,-81,33,-81,38,-81,39,-81,34,-81,35,-81,36,-81,37,-81,40,-81,26,-81,28,-81,27,-81,51,-81,52,-81,49,-81,43,-81,41,-81,21,-81,22,-81,42,-81});
    states[22] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,23,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[23] = new State(new int[]{8,-82,10,-82,9,-82,11,24,12,26,13,28,14,30,5,-82,4,-82,15,36,16,38,17,40,18,42,46,-82,47,-82,48,-82,44,-82,45,-82,3,-82,30,-82,32,-82,31,-82,29,-82,33,-82,38,-82,39,-82,34,-82,35,-82,36,-82,37,-82,40,-82,26,-82,28,-82,27,-82,51,-82,52,-82,49,-82,43,-82,41,-82,21,-82,22,-82,42,-82});
    states[24] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,25,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[25] = new State(new int[]{8,-83,10,-83,9,-83,11,-83,12,-83,13,-83,14,-83,5,-83,4,-83,15,36,16,38,17,40,18,42,46,-83,47,-83,48,-83,44,-83,45,-83,3,-83,30,-83,32,-83,31,-83,29,-83,33,-83,38,-83,39,-83,34,-83,35,-83,36,-83,37,-83,40,-83,26,-83,28,-83,27,-83,51,-83,52,-83,49,-83,43,-83,41,-83,21,-83,22,-83,42,-83});
    states[26] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,27,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[27] = new State(new int[]{8,-84,10,-84,9,-84,11,-84,12,-84,13,-84,14,-84,5,-84,4,-84,15,36,16,38,17,40,18,42,46,-84,47,-84,48,-84,44,-84,45,-84,3,-84,30,-84,32,-84,31,-84,29,-84,33,-84,38,-84,39,-84,34,-84,35,-84,36,-84,37,-84,40,-84,26,-84,28,-84,27,-84,51,-84,52,-84,49,-84,43,-84,41,-84,21,-84,22,-84,42,-84});
    states[28] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,29,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[29] = new State(new int[]{8,-85,10,-85,9,-85,11,-85,12,-85,13,-85,14,-85,5,-85,4,-85,15,36,16,38,17,40,18,42,46,-85,47,-85,48,-85,44,-85,45,-85,3,-85,30,-85,32,-85,31,-85,29,-85,33,-85,38,-85,39,-85,34,-85,35,-85,36,-85,37,-85,40,-85,26,-85,28,-85,27,-85,51,-85,52,-85,49,-85,43,-85,41,-85,21,-85,22,-85,42,-85});
    states[30] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,31,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[31] = new State(new int[]{8,-86,10,-86,9,-86,11,-86,12,-86,13,-86,14,-86,5,-86,4,-86,15,36,16,38,17,40,18,42,46,-86,47,-86,48,-86,44,-86,45,-86,3,-86,30,-86,32,-86,31,-86,29,-86,33,-86,38,-86,39,-86,34,-86,35,-86,36,-86,37,-86,40,-86,26,-86,28,-86,27,-86,51,-86,52,-86,49,-86,43,-86,41,-86,21,-86,22,-86,42,-86});
    states[32] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,33,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[33] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,-87,4,-87,15,36,16,38,17,40,18,42,46,-87,47,-87,48,-87,44,-87,45,-87,3,-87,30,-87,32,-87,31,-87,29,-87,33,-87,38,-87,39,-87,34,-87,35,-87,36,-87,37,-87,40,-87,26,-87,28,-87,27,-87,51,-87,52,-87,49,-87,43,-87,41,-87,21,-87,22,-87,42,-87});
    states[34] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,35,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[35] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,-88,15,36,16,38,17,40,18,42,46,-88,47,-88,48,-88,44,-88,45,-88,3,-88,30,-88,32,-88,31,-88,29,-88,33,-88,38,-88,39,-88,34,-88,35,-88,36,-88,37,-88,40,-88,26,-88,28,-88,27,-88,51,-88,52,-88,49,-88,43,-88,41,-88,21,-88,22,-88,42,-88});
    states[36] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,37,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[37] = new State(new int[]{8,-89,10,-89,9,-89,11,-89,12,-89,13,-89,14,-89,5,-89,4,-89,15,-89,16,-89,17,40,18,42,46,-89,47,-89,48,-89,44,-89,45,-89,3,-89,30,-89,32,-89,31,-89,29,-89,33,-89,38,-89,39,-89,34,-89,35,-89,36,-89,37,-89,40,-89,26,-89,28,-89,27,-89,51,-89,52,-89,49,-89,43,-89,41,-89,21,-89,22,-89,42,-89});
    states[38] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,39,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[39] = new State(new int[]{8,-90,10,-90,9,-90,11,-90,12,-90,13,-90,14,-90,5,-90,4,-90,15,-90,16,-90,17,40,18,42,46,-90,47,-90,48,-90,44,-90,45,-90,3,-90,30,-90,32,-90,31,-90,29,-90,33,-90,38,-90,39,-90,34,-90,35,-90,36,-90,37,-90,40,-90,26,-90,28,-90,27,-90,51,-90,52,-90,49,-90,43,-90,41,-90,21,-90,22,-90,42,-90});
    states[40] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,41,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[41] = new State(-91);
    states[42] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,43,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[43] = new State(-92);
    states[44] = new State(new int[]{30,46,50,47,19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,45,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[45] = new State(-93);
    states[46] = new State(-94);
    states[47] = new State(-95);
    states[48] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,49,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[49] = new State(new int[]{21,50,8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42});
    states[50] = new State(-96);
    states[51] = new State(-97);
    states[52] = new State(new int[]{20,53,46,-98,8,-98,10,-98,9,-98,11,-98,12,-98,13,-98,14,-98,5,-98,4,-98,15,-98,16,-98,17,-98,18,-98,47,-98,48,-98,44,-98,45,-98,3,-98,30,-98,32,-98,31,-98,29,-98,33,-98,38,-98,39,-98,34,-98,35,-98,36,-98,37,-98,40,-98,26,-98,28,-98,27,-98,51,-98,52,-98,49,-98,43,-98,41,-98,21,-98,22,-98,42,-98});
    states[53] = new State(new int[]{21,54,19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-39,55,-40,73,-25,59,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[54] = new State(-105);
    states[55] = new State(new int[]{21,56,22,57});
    states[56] = new State(-106);
    states[57] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-40,58,-25,59,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[58] = new State(-107);
    states[59] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,21,-109,22,-109});
    states[60] = new State(-117);
    states[61] = new State(-99);
    states[62] = new State(-118);
    states[63] = new State(-100);
    states[64] = new State(-101);
    states[65] = new State(-120);
    states[66] = new State(-102);
    states[67] = new State(-123);
    states[68] = new State(-103);
    states[69] = new State(-121);
    states[70] = new State(-122);
    states[71] = new State(-104);
    states[72] = new State(-124);
    states[73] = new State(-108);
    states[74] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,75,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[75] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,46,-32,3,-32,30,-32,32,-32,31,-32,29,-32,33,-32,38,-32,39,-32,34,-32,35,-32,36,-32,37,-32,40,-32,26,-32,28,-32,27,-32,51,-32,52,-32,49,-32,43,-32,41,-32});
    states[76] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,77,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[77] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,46,-33,3,-33,30,-33,32,-33,31,-33,29,-33,33,-33,38,-33,39,-33,34,-33,35,-33,36,-33,37,-33,40,-33,26,-33,28,-33,27,-33,51,-33,52,-33,49,-33,43,-33,41,-33});
    states[78] = new State(-64);
    states[79] = new State(-65);
    states[80] = new State(-5);
    states[81] = new State(new int[]{56,60,58,62},new int[]{-24,82,-29,78,-30,79});
    states[82] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,83,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[83] = new State(new int[]{46,87,8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,47,74,48,76,44,15,45,16,3,-34,30,-34,32,-34,31,-34,29,-34,33,-34,38,-34,39,-34,34,-34,35,-34,36,-34,37,-34,40,-34,26,-34,28,-34,27,-34,51,-34,52,-34,49,-34,43,-34,41,-34},new int[]{-26,84,-28,90});
    states[84] = new State(new int[]{46,85,3,-35,30,-35,32,-35,31,-35,29,-35,33,-35,38,-35,39,-35,34,-35,35,-35,36,-35,37,-35,40,-35,26,-35,28,-35,27,-35,51,-35,52,-35,49,-35,43,-35,41,-35});
    states[85] = new State(new int[]{53,11},new int[]{-27,86});
    states[86] = new State(-37);
    states[87] = new State(new int[]{53,11},new int[]{-27,88});
    states[88] = new State(new int[]{44,15,45,16,3,-36,30,-36,32,-36,31,-36,29,-36,33,-36,38,-36,39,-36,34,-36,35,-36,36,-36,37,-36,40,-36,26,-36,28,-36,27,-36,51,-36,52,-36,49,-36,43,-36,41,-36},new int[]{-28,89});
    states[89] = new State(-38);
    states[90] = new State(-39);
    states[91] = new State(-6);
    states[92] = new State(new int[]{64,96,56,60,58,62},new int[]{-24,93,-29,78,-30,79});
    states[93] = new State(new int[]{62,94,3,-40,30,-40,32,-40,31,-40,29,-40,33,-40,38,-40,39,-40,34,-40,35,-40,36,-40,37,-40,40,-40,26,-40,28,-40,27,-40,51,-40,52,-40,49,-40,43,-40,41,-40});
    states[94] = new State(new int[]{53,11},new int[]{-27,95});
    states[95] = new State(-42);
    states[96] = new State(new int[]{63,97});
    states[97] = new State(new int[]{56,60,58,62},new int[]{-24,98,-29,78,-30,79});
    states[98] = new State(-60);
    states[99] = new State(new int[]{56,60},new int[]{-29,100});
    states[100] = new State(new int[]{8,101});
    states[101] = new State(new int[]{31,102,33,109,38,113,39,117,19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,121,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[102] = new State(new int[]{64,106,56,60,58,62},new int[]{-24,103,-29,78,-30,79});
    states[103] = new State(new int[]{62,104,3,-41,30,-41,32,-41,31,-41,29,-41,33,-41,38,-41,39,-41,34,-41,35,-41,36,-41,37,-41,40,-41,26,-41,28,-41,27,-41,51,-41,52,-41,49,-41,43,-41,41,-41});
    states[104] = new State(new int[]{53,11},new int[]{-27,105});
    states[105] = new State(-43);
    states[106] = new State(new int[]{63,107});
    states[107] = new State(new int[]{56,60,58,62},new int[]{-24,108,-29,78,-30,79});
    states[108] = new State(-61);
    states[109] = new State(new int[]{56,60,58,62},new int[]{-24,110,-29,78,-30,79});
    states[110] = new State(new int[]{62,111,3,-45,30,-45,32,-45,31,-45,29,-45,33,-45,38,-45,39,-45,34,-45,35,-45,36,-45,37,-45,40,-45,26,-45,28,-45,27,-45,51,-45,52,-45,49,-45,43,-45,41,-45});
    states[111] = new State(new int[]{53,11},new int[]{-27,112});
    states[112] = new State(-47);
    states[113] = new State(new int[]{56,60,58,62},new int[]{-24,114,-29,78,-30,79});
    states[114] = new State(new int[]{62,115,3,-49,30,-49,32,-49,31,-49,29,-49,33,-49,38,-49,39,-49,34,-49,35,-49,36,-49,37,-49,40,-49,26,-49,28,-49,27,-49,51,-49,52,-49,49,-49,43,-49,41,-49});
    states[115] = new State(new int[]{53,11},new int[]{-27,116});
    states[116] = new State(-51);
    states[117] = new State(new int[]{56,60,58,62},new int[]{-24,118,-29,78,-30,79});
    states[118] = new State(new int[]{62,119,3,-53,30,-53,32,-53,31,-53,29,-53,33,-53,38,-53,39,-53,34,-53,35,-53,36,-53,37,-53,40,-53,26,-53,28,-53,27,-53,51,-53,52,-53,49,-53,43,-53,41,-53});
    states[119] = new State(new int[]{53,11},new int[]{-27,120});
    states[120] = new State(-55);
    states[121] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,3,-66,30,-66,32,-66,31,-66,29,-66,33,-66,38,-66,39,-66,34,-66,35,-66,36,-66,37,-66,40,-66,26,-66,28,-66,27,-66,51,-66,52,-66,49,-66,43,-66,41,-66});
    states[122] = new State(-7);
    states[123] = new State(new int[]{64,127,56,60,58,62},new int[]{-24,124,-29,78,-30,79});
    states[124] = new State(new int[]{62,125,3,-44,30,-44,32,-44,31,-44,29,-44,33,-44,38,-44,39,-44,34,-44,35,-44,36,-44,37,-44,40,-44,26,-44,28,-44,27,-44,51,-44,52,-44,49,-44,43,-44,41,-44});
    states[125] = new State(new int[]{53,11},new int[]{-27,126});
    states[126] = new State(-46);
    states[127] = new State(new int[]{63,128});
    states[128] = new State(new int[]{56,60,58,62},new int[]{-24,129,-29,78,-30,79});
    states[129] = new State(-62);
    states[130] = new State(-8);
    states[131] = new State(new int[]{56,60,58,62},new int[]{-24,132,-29,78,-30,79});
    states[132] = new State(new int[]{62,133,3,-48,30,-48,32,-48,31,-48,29,-48,33,-48,38,-48,39,-48,34,-48,35,-48,36,-48,37,-48,40,-48,26,-48,28,-48,27,-48,51,-48,52,-48,49,-48,43,-48,41,-48});
    states[133] = new State(new int[]{53,11},new int[]{-27,134});
    states[134] = new State(-50);
    states[135] = new State(-9);
    states[136] = new State(new int[]{56,60,58,62},new int[]{-24,137,-29,78,-30,79});
    states[137] = new State(new int[]{62,138,3,-52,30,-52,32,-52,31,-52,29,-52,33,-52,38,-52,39,-52,34,-52,35,-52,36,-52,37,-52,40,-52,26,-52,28,-52,27,-52,51,-52,52,-52,49,-52,43,-52,41,-52});
    states[138] = new State(new int[]{53,11},new int[]{-27,139});
    states[139] = new State(-54);
    states[140] = new State(-10);
    states[141] = new State(new int[]{56,60,58,62},new int[]{-24,142,-29,78,-30,79});
    states[142] = new State(-56);
    states[143] = new State(-11);
    states[144] = new State(new int[]{56,60,58,62},new int[]{-24,145,-29,78,-30,79});
    states[145] = new State(-57);
    states[146] = new State(-12);
    states[147] = new State(new int[]{56,60,58,62},new int[]{-24,148,-29,78,-30,79});
    states[148] = new State(new int[]{53,11},new int[]{-27,149});
    states[149] = new State(-58);
    states[150] = new State(-13);
    states[151] = new State(new int[]{56,60,58,62},new int[]{-24,152,-29,78,-30,79});
    states[152] = new State(new int[]{53,11},new int[]{-27,153});
    states[153] = new State(-59);
    states[154] = new State(-14);
    states[155] = new State(-15);
    states[156] = new State(-16);
    states[157] = new State(-17);
    states[158] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,159,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[159] = new State(new int[]{42,160,8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42});
    states[160] = new State(new int[]{30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-1,161,-3,188,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[161] = new State(new int[]{43,162,41,163,30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-3,3,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[162] = new State(-67);
    states[163] = new State(new int[]{30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-1,164,-3,188,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[164] = new State(new int[]{43,165,30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-3,3,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[165] = new State(-68);
    states[166] = new State(-18);
    states[167] = new State(new int[]{20,183,30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-1,168,-3,188,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[168] = new State(new int[]{43,169,30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-3,3,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[169] = new State(-69);
    states[170] = new State(-19);
    states[171] = new State(-74);
    states[172] = new State(-20);
    states[173] = new State(-75);
    states[174] = new State(-21);
    states[175] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72,3,-77,30,-77,32,-77,31,-77,29,-77,33,-77,38,-77,39,-77,34,-77,35,-77,36,-77,37,-77,40,-77,26,-77,28,-77,27,-77,51,-77,52,-77,49,-77,43,-77,41,-77},new int[]{-25,176,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[176] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,3,-76,30,-76,32,-76,31,-76,29,-76,33,-76,38,-76,39,-76,34,-76,35,-76,36,-76,37,-76,40,-76,26,-76,28,-76,27,-76,51,-76,52,-76,49,-76,43,-76,41,-76});
    states[177] = new State(-22);
    states[178] = new State(new int[]{53,11},new int[]{-27,179});
    states[179] = new State(-78);
    states[180] = new State(-23);
    states[181] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-25,182,-34,51,-29,52,-30,61,-27,63,-35,64,-36,66,-37,68,-38,71});
    states[182] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,3,-79,30,-79,32,-79,31,-79,29,-79,33,-79,38,-79,39,-79,34,-79,35,-79,36,-79,37,-79,40,-79,26,-79,28,-79,27,-79,51,-79,52,-79,49,-79,43,-79,41,-79});
    states[183] = new State(new int[]{56,60},new int[]{-31,184,-32,201,-29,191});
    states[184] = new State(new int[]{21,185,22,189});
    states[185] = new State(new int[]{30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-1,186,-3,188,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[186] = new State(new int[]{43,187,30,5,32,81,31,92,29,99,33,123,38,131,39,136,34,141,35,144,36,147,37,151,40,158,26,167,28,171,27,173,51,175,52,178,49,181},new int[]{-3,3,-4,4,-5,80,-6,91,-7,122,-8,130,-9,135,-10,140,-11,143,-12,146,-13,150,-14,154,-15,155,-16,156,-17,157,-18,166,-19,170,-20,172,-21,174,-22,177,-23,180});
    states[187] = new State(-70);
    states[188] = new State(-3);
    states[189] = new State(new int[]{56,60},new int[]{-32,190,-29,191});
    states[190] = new State(-71);
    states[191] = new State(new int[]{8,192});
    states[192] = new State(new int[]{56,60,53,11,54,65,55,67,59,69,60,70,61,72,58,62},new int[]{-33,193,-29,194,-27,195,-35,196,-36,197,-37,198,-38,199,-30,200});
    states[193] = new State(-73);
    states[194] = new State(-110);
    states[195] = new State(-111);
    states[196] = new State(-112);
    states[197] = new State(-113);
    states[198] = new State(-114);
    states[199] = new State(-115);
    states[200] = new State(-116);
    states[201] = new State(-72);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-6});
    rules[7] = new Rule(-3, new int[]{-7});
    rules[8] = new Rule(-3, new int[]{-8});
    rules[9] = new Rule(-3, new int[]{-9});
    rules[10] = new Rule(-3, new int[]{-10});
    rules[11] = new Rule(-3, new int[]{-11});
    rules[12] = new Rule(-3, new int[]{-12});
    rules[13] = new Rule(-3, new int[]{-13});
    rules[14] = new Rule(-3, new int[]{-14});
    rules[15] = new Rule(-3, new int[]{-15});
    rules[16] = new Rule(-3, new int[]{-16});
    rules[17] = new Rule(-3, new int[]{-17});
    rules[18] = new Rule(-3, new int[]{-18});
    rules[19] = new Rule(-3, new int[]{-19});
    rules[20] = new Rule(-3, new int[]{-20});
    rules[21] = new Rule(-3, new int[]{-21});
    rules[22] = new Rule(-3, new int[]{-22});
    rules[23] = new Rule(-3, new int[]{-23});
    rules[24] = new Rule(-4, new int[]{30,-24,-25});
    rules[25] = new Rule(-4, new int[]{30,-24,-25,-26});
    rules[26] = new Rule(-4, new int[]{30,-24,-25,46,-27});
    rules[27] = new Rule(-4, new int[]{30,-24,-25,-26,46,-27});
    rules[28] = new Rule(-4, new int[]{30,-24,-25,46,-27,-28});
    rules[29] = new Rule(-4, new int[]{30,-24,-25,-28});
    rules[30] = new Rule(-28, new int[]{44});
    rules[31] = new Rule(-28, new int[]{45});
    rules[32] = new Rule(-26, new int[]{47,-25});
    rules[33] = new Rule(-26, new int[]{48,-25});
    rules[34] = new Rule(-5, new int[]{32,-24,-25});
    rules[35] = new Rule(-5, new int[]{32,-24,-25,-26});
    rules[36] = new Rule(-5, new int[]{32,-24,-25,46,-27});
    rules[37] = new Rule(-5, new int[]{32,-24,-25,-26,46,-27});
    rules[38] = new Rule(-5, new int[]{32,-24,-25,46,-27,-28});
    rules[39] = new Rule(-5, new int[]{32,-24,-25,-28});
    rules[40] = new Rule(-6, new int[]{31,-24});
    rules[41] = new Rule(-6, new int[]{29,-29,8,31,-24});
    rules[42] = new Rule(-6, new int[]{31,-24,62,-27});
    rules[43] = new Rule(-6, new int[]{29,-29,8,31,-24,62,-27});
    rules[44] = new Rule(-7, new int[]{33,-24});
    rules[45] = new Rule(-7, new int[]{29,-29,8,33,-24});
    rules[46] = new Rule(-7, new int[]{33,-24,62,-27});
    rules[47] = new Rule(-7, new int[]{29,-29,8,33,-24,62,-27});
    rules[48] = new Rule(-8, new int[]{38,-24});
    rules[49] = new Rule(-8, new int[]{29,-29,8,38,-24});
    rules[50] = new Rule(-8, new int[]{38,-24,62,-27});
    rules[51] = new Rule(-8, new int[]{29,-29,8,38,-24,62,-27});
    rules[52] = new Rule(-9, new int[]{39,-24});
    rules[53] = new Rule(-9, new int[]{29,-29,8,39,-24});
    rules[54] = new Rule(-9, new int[]{39,-24,62,-27});
    rules[55] = new Rule(-9, new int[]{29,-29,8,39,-24,62,-27});
    rules[56] = new Rule(-10, new int[]{34,-24});
    rules[57] = new Rule(-11, new int[]{35,-24});
    rules[58] = new Rule(-12, new int[]{36,-24,-27});
    rules[59] = new Rule(-13, new int[]{37,-24,-27});
    rules[60] = new Rule(-14, new int[]{31,64,63,-24});
    rules[61] = new Rule(-14, new int[]{29,-29,8,31,64,63,-24});
    rules[62] = new Rule(-15, new int[]{33,64,63,-24});
    rules[63] = new Rule(-15, new int[]{29,-29,8,31,64,63,-24});
    rules[64] = new Rule(-24, new int[]{-29});
    rules[65] = new Rule(-24, new int[]{-30});
    rules[66] = new Rule(-16, new int[]{29,-29,8,-25});
    rules[67] = new Rule(-17, new int[]{40,-25,42,-1,43});
    rules[68] = new Rule(-17, new int[]{40,-25,42,-1,41,-1,43});
    rules[69] = new Rule(-18, new int[]{26,-1,43});
    rules[70] = new Rule(-18, new int[]{26,20,-31,21,-1,43});
    rules[71] = new Rule(-31, new int[]{-31,22,-32});
    rules[72] = new Rule(-31, new int[]{-32});
    rules[73] = new Rule(-32, new int[]{-29,8,-33});
    rules[74] = new Rule(-19, new int[]{28});
    rules[75] = new Rule(-20, new int[]{27});
    rules[76] = new Rule(-21, new int[]{51,-25});
    rules[77] = new Rule(-21, new int[]{51});
    rules[78] = new Rule(-22, new int[]{52,-27});
    rules[79] = new Rule(-23, new int[]{49,-25});
    rules[80] = new Rule(-25, new int[]{-25,8,-25});
    rules[81] = new Rule(-25, new int[]{-25,10,-25});
    rules[82] = new Rule(-25, new int[]{-25,9,-25});
    rules[83] = new Rule(-25, new int[]{-25,11,-25});
    rules[84] = new Rule(-25, new int[]{-25,12,-25});
    rules[85] = new Rule(-25, new int[]{-25,13,-25});
    rules[86] = new Rule(-25, new int[]{-25,14,-25});
    rules[87] = new Rule(-25, new int[]{-25,5,-25});
    rules[88] = new Rule(-25, new int[]{-25,4,-25});
    rules[89] = new Rule(-25, new int[]{-25,15,-25});
    rules[90] = new Rule(-25, new int[]{-25,16,-25});
    rules[91] = new Rule(-25, new int[]{-25,17,-25});
    rules[92] = new Rule(-25, new int[]{-25,18,-25});
    rules[93] = new Rule(-25, new int[]{19,-25});
    rules[94] = new Rule(-25, new int[]{19,30});
    rules[95] = new Rule(-25, new int[]{19,50});
    rules[96] = new Rule(-25, new int[]{20,-25,21});
    rules[97] = new Rule(-25, new int[]{-34});
    rules[98] = new Rule(-25, new int[]{-29});
    rules[99] = new Rule(-25, new int[]{-30});
    rules[100] = new Rule(-25, new int[]{-27});
    rules[101] = new Rule(-25, new int[]{-35});
    rules[102] = new Rule(-25, new int[]{-36});
    rules[103] = new Rule(-25, new int[]{-37});
    rules[104] = new Rule(-25, new int[]{-38});
    rules[105] = new Rule(-34, new int[]{-29,20,21});
    rules[106] = new Rule(-34, new int[]{-29,20,-39,21});
    rules[107] = new Rule(-39, new int[]{-39,22,-40});
    rules[108] = new Rule(-39, new int[]{-40});
    rules[109] = new Rule(-40, new int[]{-25});
    rules[110] = new Rule(-33, new int[]{-29});
    rules[111] = new Rule(-33, new int[]{-27});
    rules[112] = new Rule(-33, new int[]{-35});
    rules[113] = new Rule(-33, new int[]{-36});
    rules[114] = new Rule(-33, new int[]{-37});
    rules[115] = new Rule(-33, new int[]{-38});
    rules[116] = new Rule(-33, new int[]{-30});
    rules[117] = new Rule(-29, new int[]{56});
    rules[118] = new Rule(-30, new int[]{58});
    rules[119] = new Rule(-27, new int[]{53});
    rules[120] = new Rule(-35, new int[]{54});
    rules[121] = new Rule(-37, new int[]{59});
    rules[122] = new Rule(-37, new int[]{60});
    rules[123] = new Rule(-36, new int[]{55});
    rules[124] = new Rule(-38, new int[]{61});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // stmt_list -> stmt_list, stmt
{ CurrentSemanticValue.n = new(NodeType.StmtList, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 3: // stmt_list -> stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 4: // stmt -> set_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 5: // stmt -> eset_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 6: // stmt -> get_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 7: // stmt -> eget_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 8: // stmt -> exists_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 9: // stmt -> eexists_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 10: // stmt -> delete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 11: // stmt -> edelete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 12: // stmt -> extend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 13: // stmt -> eextend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 14: // stmt -> get_by_prefix_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 15: // stmt -> eget_by_prefix_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 16: // stmt -> let_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 17: // stmt -> if_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 18: // stmt -> begin_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 19: // stmt -> commit_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 20: // stmt -> rollback_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 21: // stmt -> return_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 22: // stmt -> sleep_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 23: // stmt -> throw_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 24: // set_stmt -> TSET, key_name, expression
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 25: // set_stmt -> TSET, key_name, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 26: // set_stmt -> TSET, key_name, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 27: // set_stmt -> TSET, key_name, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 28: // set_stmt -> TSET, key_name, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 29: // set_stmt -> TSET, key_name, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 30: // set_not_exists -> TNX
{ CurrentSemanticValue.n = new(NodeType.SetNotExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 31: // set_not_exists -> TXX
{ CurrentSemanticValue.n = new(NodeType.SetExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 32: // set_cmp -> TCMP, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmp, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 33: // set_cmp -> TCMPREV, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmpRev, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 34: // eset_stmt -> TESET, key_name, expression
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 35: // eset_stmt -> TESET, key_name, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 36: // eset_stmt -> TESET, key_name, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 37: // eset_stmt -> TESET, key_name, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 38: // eset_stmt -> TESET, key_name, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 39: // eset_stmt -> TESET, key_name, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 40: // get_stmt -> TGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 41: // get_stmt -> TLET, identifier, TEQUALS, TGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 42: // get_stmt -> TGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 43: // get_stmt -> TLET, identifier, TEQUALS, TGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 44: // eget_stmt -> TEGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 45: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 46: // eget_stmt -> TEGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 47: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 48: // exists_stmt -> TEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 49: // exists_stmt -> TLET, identifier, TEQUALS, TEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 50: // exists_stmt -> TEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 51: // exists_stmt -> TLET, identifier, TEQUALS, TEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 52: // eexists_stmt -> TEEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 53: // eexists_stmt -> TLET, identifier, TEQUALS, TEEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 54: // eexists_stmt -> TEEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 55: // eexists_stmt -> TLET, identifier, TEQUALS, TEEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 56: // delete_stmt -> TDELETE, key_name
{ CurrentSemanticValue.n = new(NodeType.Delete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 57: // edelete_stmt -> TEDELETE, key_name
{ CurrentSemanticValue.n = new(NodeType.Edelete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 58: // extend_stmt -> TEXTEND, key_name, int
{ CurrentSemanticValue.n = new(NodeType.Extend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 59: // eextend_stmt -> TEEXTEND, key_name, int
{ CurrentSemanticValue.n = new(NodeType.Eextend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 60: // get_by_prefix_stmt -> TGET, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.GetByPrefix, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 61: // get_by_prefix_stmt -> TLET, identifier, TEQUALS, TGET, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.GetByPrefix, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-6].n, null, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 62: // eget_by_prefix_stmt -> TEGET, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.EgetByPrefix, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 63: // eget_by_prefix_stmt -> TLET, identifier, TEQUALS, TGET, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.EgetByPrefix, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-6].n, null, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 64: // key_name -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 65: // key_name -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 66: // let_stmt -> TLET, identifier, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Let, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 67: // if_stmt -> TIF, expression, TTHEN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 68: // if_stmt -> TIF, expression, TTHEN, stmt_list, TELSE, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 69: // begin_stmt -> TBEGIN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 70: // begin_stmt -> TBEGIN, LPAREN, begin_options, RPAREN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 71: // begin_options -> begin_options, TCOMMA, begin_option
{ CurrentSemanticValue.n = new(NodeType.BeginOptionList, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 72: // begin_options -> begin_option
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 73: // begin_option -> identifier, TEQUALS, simple_expr
{ CurrentSemanticValue.n = new(NodeType.BeginOption, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 74: // commit_stmt -> TCOMMIT
{ CurrentSemanticValue.n = new(NodeType.Commit, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 75: // rollback_stmt -> TROLLBACK
{ CurrentSemanticValue.n = new(NodeType.Rollback, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 76: // return_stmt -> TRETURN, expression
{ CurrentSemanticValue.n = new(NodeType.Return, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 77: // return_stmt -> TRETURN
{ CurrentSemanticValue.n = new(NodeType.Return, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 78: // sleep_stmt -> TSLEEP, int
{ CurrentSemanticValue.n = new(NodeType.Sleep, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 79: // throw_stmt -> TTHROW, expression
{ CurrentSemanticValue.n = new(NodeType.Throw, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 80: // expression -> expression, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 81: // expression -> expression, TDOUBLEEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 82: // expression -> expression, TNOTEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.NotEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 83: // expression -> expression, TLESSTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.LessThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 84: // expression -> expression, TGREATERTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 85: // expression -> expression, TLESSTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.LessThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 86: // expression -> expression, TGREATERTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 87: // expression -> expression, TAND, expression
{ CurrentSemanticValue.n = new(NodeType.And, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 88: // expression -> expression, TOR, expression
{ CurrentSemanticValue.n = new(NodeType.Or, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 89: // expression -> expression, TADD, expression
{ CurrentSemanticValue.n = new(NodeType.Add, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 90: // expression -> expression, TMINUS, expression
{ CurrentSemanticValue.n = new(NodeType.Subtract, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 91: // expression -> expression, TMULT, expression
{ CurrentSemanticValue.n = new(NodeType.Mult, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 92: // expression -> expression, TDIV, expression
{ CurrentSemanticValue.n = new(NodeType.Div, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 93: // expression -> TNOT, expression
{ CurrentSemanticValue.n = new(NodeType.Not, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 94: // expression -> TNOT, TSET
{ CurrentSemanticValue.n = new(NodeType.NotSet, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 95: // expression -> TNOT, TFOUND
{ CurrentSemanticValue.n = new(NodeType.NotFound, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 96: // expression -> LPAREN, expression, RPAREN
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-2].l; }
        break;
      case 97: // expression -> fcall_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 98: // expression -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 99: // expression -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 100: // expression -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 101: // expression -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 102: // expression -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 103: // expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 104: // expression -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 105: // fcall_expr -> identifier, LPAREN, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-3].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 106: // fcall_expr -> identifier, LPAREN, fcall_argument_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 107: // fcall_argument_list -> fcall_argument_list, TCOMMA, fcall_argument_item
{ CurrentSemanticValue.n = new(NodeType.ArgumentList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 108: // fcall_argument_list -> fcall_argument_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 109: // fcall_argument_item -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 110: // simple_expr -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 111: // simple_expr -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 112: // simple_expr -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 113: // simple_expr -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 114: // simple_expr -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 115: // simple_expr -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 116: // simple_expr -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 117: // identifier -> TIDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 118: // placeholder -> TPLACEHOLDER
{ CurrentSemanticValue.n = new(NodeType.Placeholder, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 119: // int -> TDIGIT
{ CurrentSemanticValue.n = new(NodeType.IntegerType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 120: // float -> TFLOAT
{ CurrentSemanticValue.n = new(NodeType.FloatType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 121: // boolean -> TTRUE
{ CurrentSemanticValue.n = new(NodeType.BooleanType, null, null, null, null, null, null, "true", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 122: // boolean -> TFALSE
{ CurrentSemanticValue.n = new(NodeType.BooleanType, null, null, null, null, null, null, "false", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 123: // string -> TSTRING
{ CurrentSemanticValue.n = new(NodeType.StringType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 124: // null -> TNULL
{ CurrentSemanticValue.n = new(NodeType.NullType, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
