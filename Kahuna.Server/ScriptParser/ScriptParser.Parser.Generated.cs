// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 4/9/2025 11:34:58 AM
// Input file <ScriptParser/ScriptParser.Language.grammar.y - 4/9/2025 11:34:50 AM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Kahuna.Server.ScriptParser
{
internal enum Token {error=2,EOF=3,TOR=4,TAND=5,TLIKE=6,
    TILIKE=7,TEQUALS=8,TNOTEQUALS=9,TDOUBLEEQUALS=10,TLESSTHAN=11,TGREATERTHAN=12,
    TLESSTHANEQUALS=13,TGREATERTHANEQUALS=14,TADD=15,TMINUS=16,TMULT=17,TDIV=18,
    TNOT=19,LPAREN=20,RPAREN=21,TCOMMA=22,LBRACE=23,RBRACE=24,
    TDOUBLEQUALS=25,TBEGIN=26,TROLLBACK=27,TCOMMIT=28,TLET=29,TSET=30,
    TGET=31,TESET=32,TEGET=33,TDELETE=34,TEDELETE=35,TEXTEND=36,
    TEEXTEND=37,TEXISTS=38,TEEXISTS=39,TIF=40,TELSE=41,TTHEN=42,
    TEND=43,TNX=44,TXX=45,TEX=46,TCMP=47,TCMPREV=48,
    TTHROW=49,TFOUND=50,TRETURN=51,TSLEEP=52,TDIGIT=53,TFLOAT=54,
    TSTRING=55,TIDENTIFIER=56,TESCIDENTIFIER=57,TPLACEHOLDER=58,TTRUE=59,TFALSE=60,
    TNULL=61,TAT=62};

internal partial struct ValueType
{ 
        public NodeAst n;
        public string s;
        public int l;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal partial class scriptParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[119];
  private static State[] states = new State[191];
  private static string[] nonTerms = new string[] {
      "stmt_list", "$accept", "stmt", "set_stmt", "eset_stmt", "get_stmt", "eget_stmt", 
      "exists_stmt", "eexists_stmt", "delete_stmt", "edelete_stmt", "extend_stmt", 
      "eextend_stmt", "let_stmt", "if_stmt", "begin_stmt", "commit_stmt", "rollback_stmt", 
      "return_stmt", "sleep_stmt", "throw_stmt", "key_name", "expression", "set_cmp", 
      "int", "set_not_exists", "identifier", "placeholder", "begin_options", 
      "begin_option", "simple_expr", "fcall_expr", "float", "string", "boolean", 
      "null", "fcall_argument_list", "fcall_argument_item", };

  static scriptParser() {
    states[0] = new State(new int[]{30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-1,1,-3,177,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[1] = new State(new int[]{3,2,30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-3,3,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-4);
    states[5] = new State(new int[]{56,60,58,62},new int[]{-22,6,-27,78,-28,79});
    states[6] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,7,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[7] = new State(new int[]{46,12,8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,47,74,48,76,44,15,45,16,3,-22,30,-22,32,-22,31,-22,29,-22,33,-22,38,-22,39,-22,34,-22,35,-22,36,-22,37,-22,40,-22,26,-22,28,-22,27,-22,51,-22,52,-22,49,-22,43,-22,41,-22},new int[]{-24,8,-26,17});
    states[8] = new State(new int[]{46,9,3,-23,30,-23,32,-23,31,-23,29,-23,33,-23,38,-23,39,-23,34,-23,35,-23,36,-23,37,-23,40,-23,26,-23,28,-23,27,-23,51,-23,52,-23,49,-23,43,-23,41,-23});
    states[9] = new State(new int[]{53,11},new int[]{-25,10});
    states[10] = new State(-25);
    states[11] = new State(-113);
    states[12] = new State(new int[]{53,11},new int[]{-25,13});
    states[13] = new State(new int[]{44,15,45,16,3,-24,30,-24,32,-24,31,-24,29,-24,33,-24,38,-24,39,-24,34,-24,35,-24,36,-24,37,-24,40,-24,26,-24,28,-24,27,-24,51,-24,52,-24,49,-24,43,-24,41,-24},new int[]{-26,14});
    states[14] = new State(-26);
    states[15] = new State(-28);
    states[16] = new State(-29);
    states[17] = new State(-27);
    states[18] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,19,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[19] = new State(new int[]{8,-74,10,-74,9,-74,11,24,12,26,13,28,14,30,5,-74,4,-74,15,36,16,38,17,40,18,42,46,-74,47,-74,48,-74,44,-74,45,-74,3,-74,30,-74,32,-74,31,-74,29,-74,33,-74,38,-74,39,-74,34,-74,35,-74,36,-74,37,-74,40,-74,26,-74,28,-74,27,-74,51,-74,52,-74,49,-74,43,-74,41,-74,21,-74,22,-74,42,-74});
    states[20] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,21,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[21] = new State(new int[]{8,-75,10,-75,9,-75,11,24,12,26,13,28,14,30,5,-75,4,-75,15,36,16,38,17,40,18,42,46,-75,47,-75,48,-75,44,-75,45,-75,3,-75,30,-75,32,-75,31,-75,29,-75,33,-75,38,-75,39,-75,34,-75,35,-75,36,-75,37,-75,40,-75,26,-75,28,-75,27,-75,51,-75,52,-75,49,-75,43,-75,41,-75,21,-75,22,-75,42,-75});
    states[22] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,23,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[23] = new State(new int[]{8,-76,10,-76,9,-76,11,24,12,26,13,28,14,30,5,-76,4,-76,15,36,16,38,17,40,18,42,46,-76,47,-76,48,-76,44,-76,45,-76,3,-76,30,-76,32,-76,31,-76,29,-76,33,-76,38,-76,39,-76,34,-76,35,-76,36,-76,37,-76,40,-76,26,-76,28,-76,27,-76,51,-76,52,-76,49,-76,43,-76,41,-76,21,-76,22,-76,42,-76});
    states[24] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,25,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[25] = new State(new int[]{8,-77,10,-77,9,-77,11,-77,12,-77,13,-77,14,-77,5,-77,4,-77,15,36,16,38,17,40,18,42,46,-77,47,-77,48,-77,44,-77,45,-77,3,-77,30,-77,32,-77,31,-77,29,-77,33,-77,38,-77,39,-77,34,-77,35,-77,36,-77,37,-77,40,-77,26,-77,28,-77,27,-77,51,-77,52,-77,49,-77,43,-77,41,-77,21,-77,22,-77,42,-77});
    states[26] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,27,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[27] = new State(new int[]{8,-78,10,-78,9,-78,11,-78,12,-78,13,-78,14,-78,5,-78,4,-78,15,36,16,38,17,40,18,42,46,-78,47,-78,48,-78,44,-78,45,-78,3,-78,30,-78,32,-78,31,-78,29,-78,33,-78,38,-78,39,-78,34,-78,35,-78,36,-78,37,-78,40,-78,26,-78,28,-78,27,-78,51,-78,52,-78,49,-78,43,-78,41,-78,21,-78,22,-78,42,-78});
    states[28] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,29,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[29] = new State(new int[]{8,-79,10,-79,9,-79,11,-79,12,-79,13,-79,14,-79,5,-79,4,-79,15,36,16,38,17,40,18,42,46,-79,47,-79,48,-79,44,-79,45,-79,3,-79,30,-79,32,-79,31,-79,29,-79,33,-79,38,-79,39,-79,34,-79,35,-79,36,-79,37,-79,40,-79,26,-79,28,-79,27,-79,51,-79,52,-79,49,-79,43,-79,41,-79,21,-79,22,-79,42,-79});
    states[30] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,31,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[31] = new State(new int[]{8,-80,10,-80,9,-80,11,-80,12,-80,13,-80,14,-80,5,-80,4,-80,15,36,16,38,17,40,18,42,46,-80,47,-80,48,-80,44,-80,45,-80,3,-80,30,-80,32,-80,31,-80,29,-80,33,-80,38,-80,39,-80,34,-80,35,-80,36,-80,37,-80,40,-80,26,-80,28,-80,27,-80,51,-80,52,-80,49,-80,43,-80,41,-80,21,-80,22,-80,42,-80});
    states[32] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,33,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[33] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,-81,4,-81,15,36,16,38,17,40,18,42,46,-81,47,-81,48,-81,44,-81,45,-81,3,-81,30,-81,32,-81,31,-81,29,-81,33,-81,38,-81,39,-81,34,-81,35,-81,36,-81,37,-81,40,-81,26,-81,28,-81,27,-81,51,-81,52,-81,49,-81,43,-81,41,-81,21,-81,22,-81,42,-81});
    states[34] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,35,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[35] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,-82,15,36,16,38,17,40,18,42,46,-82,47,-82,48,-82,44,-82,45,-82,3,-82,30,-82,32,-82,31,-82,29,-82,33,-82,38,-82,39,-82,34,-82,35,-82,36,-82,37,-82,40,-82,26,-82,28,-82,27,-82,51,-82,52,-82,49,-82,43,-82,41,-82,21,-82,22,-82,42,-82});
    states[36] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,37,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[37] = new State(new int[]{8,-83,10,-83,9,-83,11,-83,12,-83,13,-83,14,-83,5,-83,4,-83,15,-83,16,-83,17,40,18,42,46,-83,47,-83,48,-83,44,-83,45,-83,3,-83,30,-83,32,-83,31,-83,29,-83,33,-83,38,-83,39,-83,34,-83,35,-83,36,-83,37,-83,40,-83,26,-83,28,-83,27,-83,51,-83,52,-83,49,-83,43,-83,41,-83,21,-83,22,-83,42,-83});
    states[38] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,39,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[39] = new State(new int[]{8,-84,10,-84,9,-84,11,-84,12,-84,13,-84,14,-84,5,-84,4,-84,15,-84,16,-84,17,40,18,42,46,-84,47,-84,48,-84,44,-84,45,-84,3,-84,30,-84,32,-84,31,-84,29,-84,33,-84,38,-84,39,-84,34,-84,35,-84,36,-84,37,-84,40,-84,26,-84,28,-84,27,-84,51,-84,52,-84,49,-84,43,-84,41,-84,21,-84,22,-84,42,-84});
    states[40] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,41,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[41] = new State(-85);
    states[42] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,43,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[43] = new State(-86);
    states[44] = new State(new int[]{30,46,50,47,19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,45,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[45] = new State(-87);
    states[46] = new State(-88);
    states[47] = new State(-89);
    states[48] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,49,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[49] = new State(new int[]{21,50,8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42});
    states[50] = new State(-90);
    states[51] = new State(-91);
    states[52] = new State(new int[]{20,53,46,-92,8,-92,10,-92,9,-92,11,-92,12,-92,13,-92,14,-92,5,-92,4,-92,15,-92,16,-92,17,-92,18,-92,47,-92,48,-92,44,-92,45,-92,3,-92,30,-92,32,-92,31,-92,29,-92,33,-92,38,-92,39,-92,34,-92,35,-92,36,-92,37,-92,40,-92,26,-92,28,-92,27,-92,51,-92,52,-92,49,-92,43,-92,41,-92,21,-92,22,-92,42,-92});
    states[53] = new State(new int[]{21,54,19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-37,55,-38,73,-23,59,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[54] = new State(-99);
    states[55] = new State(new int[]{21,56,22,57});
    states[56] = new State(-100);
    states[57] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-38,58,-23,59,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[58] = new State(-101);
    states[59] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,21,-103,22,-103});
    states[60] = new State(-111);
    states[61] = new State(-93);
    states[62] = new State(-112);
    states[63] = new State(-94);
    states[64] = new State(-95);
    states[65] = new State(-114);
    states[66] = new State(-96);
    states[67] = new State(-117);
    states[68] = new State(-97);
    states[69] = new State(-115);
    states[70] = new State(-116);
    states[71] = new State(-98);
    states[72] = new State(-118);
    states[73] = new State(-102);
    states[74] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,75,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[75] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,46,-30,3,-30,30,-30,32,-30,31,-30,29,-30,33,-30,38,-30,39,-30,34,-30,35,-30,36,-30,37,-30,40,-30,26,-30,28,-30,27,-30,51,-30,52,-30,49,-30,43,-30,41,-30});
    states[76] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,77,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[77] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,46,-31,3,-31,30,-31,32,-31,31,-31,29,-31,33,-31,38,-31,39,-31,34,-31,35,-31,36,-31,37,-31,40,-31,26,-31,28,-31,27,-31,51,-31,52,-31,49,-31,43,-31,41,-31});
    states[78] = new State(-58);
    states[79] = new State(-59);
    states[80] = new State(-5);
    states[81] = new State(new int[]{56,60,58,62},new int[]{-22,82,-27,78,-28,79});
    states[82] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,83,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[83] = new State(new int[]{46,87,8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,47,74,48,76,44,15,45,16,3,-32,30,-32,32,-32,31,-32,29,-32,33,-32,38,-32,39,-32,34,-32,35,-32,36,-32,37,-32,40,-32,26,-32,28,-32,27,-32,51,-32,52,-32,49,-32,43,-32,41,-32},new int[]{-24,84,-26,90});
    states[84] = new State(new int[]{46,85,3,-33,30,-33,32,-33,31,-33,29,-33,33,-33,38,-33,39,-33,34,-33,35,-33,36,-33,37,-33,40,-33,26,-33,28,-33,27,-33,51,-33,52,-33,49,-33,43,-33,41,-33});
    states[85] = new State(new int[]{53,11},new int[]{-25,86});
    states[86] = new State(-35);
    states[87] = new State(new int[]{53,11},new int[]{-25,88});
    states[88] = new State(new int[]{44,15,45,16,3,-34,30,-34,32,-34,31,-34,29,-34,33,-34,38,-34,39,-34,34,-34,35,-34,36,-34,37,-34,40,-34,26,-34,28,-34,27,-34,51,-34,52,-34,49,-34,43,-34,41,-34},new int[]{-26,89});
    states[89] = new State(-36);
    states[90] = new State(-37);
    states[91] = new State(-6);
    states[92] = new State(new int[]{56,60,58,62},new int[]{-22,93,-27,78,-28,79});
    states[93] = new State(new int[]{62,94,3,-38,30,-38,32,-38,31,-38,29,-38,33,-38,38,-38,39,-38,34,-38,35,-38,36,-38,37,-38,40,-38,26,-38,28,-38,27,-38,51,-38,52,-38,49,-38,43,-38,41,-38});
    states[94] = new State(new int[]{53,11},new int[]{-25,95});
    states[95] = new State(-40);
    states[96] = new State(new int[]{56,60},new int[]{-27,97});
    states[97] = new State(new int[]{8,98});
    states[98] = new State(new int[]{31,99,33,103,38,107,39,111,19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,115,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[99] = new State(new int[]{56,60,58,62},new int[]{-22,100,-27,78,-28,79});
    states[100] = new State(new int[]{62,101,3,-39,30,-39,32,-39,31,-39,29,-39,33,-39,38,-39,39,-39,34,-39,35,-39,36,-39,37,-39,40,-39,26,-39,28,-39,27,-39,51,-39,52,-39,49,-39,43,-39,41,-39});
    states[101] = new State(new int[]{53,11},new int[]{-25,102});
    states[102] = new State(-41);
    states[103] = new State(new int[]{56,60,58,62},new int[]{-22,104,-27,78,-28,79});
    states[104] = new State(new int[]{62,105,3,-43,30,-43,32,-43,31,-43,29,-43,33,-43,38,-43,39,-43,34,-43,35,-43,36,-43,37,-43,40,-43,26,-43,28,-43,27,-43,51,-43,52,-43,49,-43,43,-43,41,-43});
    states[105] = new State(new int[]{53,11},new int[]{-25,106});
    states[106] = new State(-45);
    states[107] = new State(new int[]{56,60,58,62},new int[]{-22,108,-27,78,-28,79});
    states[108] = new State(new int[]{62,109,3,-47,30,-47,32,-47,31,-47,29,-47,33,-47,38,-47,39,-47,34,-47,35,-47,36,-47,37,-47,40,-47,26,-47,28,-47,27,-47,51,-47,52,-47,49,-47,43,-47,41,-47});
    states[109] = new State(new int[]{53,11},new int[]{-25,110});
    states[110] = new State(-49);
    states[111] = new State(new int[]{56,60,58,62},new int[]{-22,112,-27,78,-28,79});
    states[112] = new State(new int[]{62,113,3,-51,30,-51,32,-51,31,-51,29,-51,33,-51,38,-51,39,-51,34,-51,35,-51,36,-51,37,-51,40,-51,26,-51,28,-51,27,-51,51,-51,52,-51,49,-51,43,-51,41,-51});
    states[113] = new State(new int[]{53,11},new int[]{-25,114});
    states[114] = new State(-53);
    states[115] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,3,-60,30,-60,32,-60,31,-60,29,-60,33,-60,38,-60,39,-60,34,-60,35,-60,36,-60,37,-60,40,-60,26,-60,28,-60,27,-60,51,-60,52,-60,49,-60,43,-60,41,-60});
    states[116] = new State(-7);
    states[117] = new State(new int[]{56,60,58,62},new int[]{-22,118,-27,78,-28,79});
    states[118] = new State(new int[]{62,119,3,-42,30,-42,32,-42,31,-42,29,-42,33,-42,38,-42,39,-42,34,-42,35,-42,36,-42,37,-42,40,-42,26,-42,28,-42,27,-42,51,-42,52,-42,49,-42,43,-42,41,-42});
    states[119] = new State(new int[]{53,11},new int[]{-25,120});
    states[120] = new State(-44);
    states[121] = new State(-8);
    states[122] = new State(new int[]{56,60,58,62},new int[]{-22,123,-27,78,-28,79});
    states[123] = new State(new int[]{62,124,3,-46,30,-46,32,-46,31,-46,29,-46,33,-46,38,-46,39,-46,34,-46,35,-46,36,-46,37,-46,40,-46,26,-46,28,-46,27,-46,51,-46,52,-46,49,-46,43,-46,41,-46});
    states[124] = new State(new int[]{53,11},new int[]{-25,125});
    states[125] = new State(-48);
    states[126] = new State(-9);
    states[127] = new State(new int[]{56,60,58,62},new int[]{-22,128,-27,78,-28,79});
    states[128] = new State(new int[]{62,129,3,-50,30,-50,32,-50,31,-50,29,-50,33,-50,38,-50,39,-50,34,-50,35,-50,36,-50,37,-50,40,-50,26,-50,28,-50,27,-50,51,-50,52,-50,49,-50,43,-50,41,-50});
    states[129] = new State(new int[]{53,11},new int[]{-25,130});
    states[130] = new State(-52);
    states[131] = new State(-10);
    states[132] = new State(new int[]{56,60,58,62},new int[]{-22,133,-27,78,-28,79});
    states[133] = new State(-54);
    states[134] = new State(-11);
    states[135] = new State(new int[]{56,60,58,62},new int[]{-22,136,-27,78,-28,79});
    states[136] = new State(-55);
    states[137] = new State(-12);
    states[138] = new State(new int[]{56,60,58,62},new int[]{-22,139,-27,78,-28,79});
    states[139] = new State(new int[]{53,11},new int[]{-25,140});
    states[140] = new State(-56);
    states[141] = new State(-13);
    states[142] = new State(new int[]{56,60,58,62},new int[]{-22,143,-27,78,-28,79});
    states[143] = new State(new int[]{53,11},new int[]{-25,144});
    states[144] = new State(-57);
    states[145] = new State(-14);
    states[146] = new State(-15);
    states[147] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,148,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[148] = new State(new int[]{42,149,8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42});
    states[149] = new State(new int[]{30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-1,150,-3,177,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[150] = new State(new int[]{43,151,41,152,30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-3,3,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[151] = new State(-61);
    states[152] = new State(new int[]{30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-1,153,-3,177,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[153] = new State(new int[]{43,154,30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-3,3,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[154] = new State(-62);
    states[155] = new State(-16);
    states[156] = new State(new int[]{20,172,30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-1,157,-3,177,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[157] = new State(new int[]{43,158,30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-3,3,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[158] = new State(-63);
    states[159] = new State(-17);
    states[160] = new State(-68);
    states[161] = new State(-18);
    states[162] = new State(-69);
    states[163] = new State(-19);
    states[164] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72,3,-71,30,-71,32,-71,31,-71,29,-71,33,-71,38,-71,39,-71,34,-71,35,-71,36,-71,37,-71,40,-71,26,-71,28,-71,27,-71,51,-71,52,-71,49,-71,43,-71,41,-71},new int[]{-23,165,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[165] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,3,-70,30,-70,32,-70,31,-70,29,-70,33,-70,38,-70,39,-70,34,-70,35,-70,36,-70,37,-70,40,-70,26,-70,28,-70,27,-70,51,-70,52,-70,49,-70,43,-70,41,-70});
    states[166] = new State(-20);
    states[167] = new State(new int[]{53,11},new int[]{-25,168});
    states[168] = new State(-72);
    states[169] = new State(-21);
    states[170] = new State(new int[]{19,44,20,48,56,60,58,62,53,11,54,65,55,67,59,69,60,70,61,72},new int[]{-23,171,-32,51,-27,52,-28,61,-25,63,-33,64,-34,66,-35,68,-36,71});
    states[171] = new State(new int[]{8,18,10,20,9,22,11,24,12,26,13,28,14,30,5,32,4,34,15,36,16,38,17,40,18,42,3,-73,30,-73,32,-73,31,-73,29,-73,33,-73,38,-73,39,-73,34,-73,35,-73,36,-73,37,-73,40,-73,26,-73,28,-73,27,-73,51,-73,52,-73,49,-73,43,-73,41,-73});
    states[172] = new State(new int[]{56,60},new int[]{-29,173,-30,190,-27,180});
    states[173] = new State(new int[]{21,174,22,178});
    states[174] = new State(new int[]{30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-1,175,-3,177,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[175] = new State(new int[]{43,176,30,5,32,81,31,92,29,96,33,117,38,122,39,127,34,132,35,135,36,138,37,142,40,147,26,156,28,160,27,162,51,164,52,167,49,170},new int[]{-3,3,-4,4,-5,80,-6,91,-7,116,-8,121,-9,126,-10,131,-11,134,-12,137,-13,141,-14,145,-15,146,-16,155,-17,159,-18,161,-19,163,-20,166,-21,169});
    states[176] = new State(-64);
    states[177] = new State(-3);
    states[178] = new State(new int[]{56,60},new int[]{-30,179,-27,180});
    states[179] = new State(-65);
    states[180] = new State(new int[]{8,181});
    states[181] = new State(new int[]{56,60,53,11,54,65,55,67,59,69,60,70,61,72,58,62},new int[]{-31,182,-27,183,-25,184,-33,185,-34,186,-35,187,-36,188,-28,189});
    states[182] = new State(-67);
    states[183] = new State(-104);
    states[184] = new State(-105);
    states[185] = new State(-106);
    states[186] = new State(-107);
    states[187] = new State(-108);
    states[188] = new State(-109);
    states[189] = new State(-110);
    states[190] = new State(-66);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-6});
    rules[7] = new Rule(-3, new int[]{-7});
    rules[8] = new Rule(-3, new int[]{-8});
    rules[9] = new Rule(-3, new int[]{-9});
    rules[10] = new Rule(-3, new int[]{-10});
    rules[11] = new Rule(-3, new int[]{-11});
    rules[12] = new Rule(-3, new int[]{-12});
    rules[13] = new Rule(-3, new int[]{-13});
    rules[14] = new Rule(-3, new int[]{-14});
    rules[15] = new Rule(-3, new int[]{-15});
    rules[16] = new Rule(-3, new int[]{-16});
    rules[17] = new Rule(-3, new int[]{-17});
    rules[18] = new Rule(-3, new int[]{-18});
    rules[19] = new Rule(-3, new int[]{-19});
    rules[20] = new Rule(-3, new int[]{-20});
    rules[21] = new Rule(-3, new int[]{-21});
    rules[22] = new Rule(-4, new int[]{30,-22,-23});
    rules[23] = new Rule(-4, new int[]{30,-22,-23,-24});
    rules[24] = new Rule(-4, new int[]{30,-22,-23,46,-25});
    rules[25] = new Rule(-4, new int[]{30,-22,-23,-24,46,-25});
    rules[26] = new Rule(-4, new int[]{30,-22,-23,46,-25,-26});
    rules[27] = new Rule(-4, new int[]{30,-22,-23,-26});
    rules[28] = new Rule(-26, new int[]{44});
    rules[29] = new Rule(-26, new int[]{45});
    rules[30] = new Rule(-24, new int[]{47,-23});
    rules[31] = new Rule(-24, new int[]{48,-23});
    rules[32] = new Rule(-5, new int[]{32,-22,-23});
    rules[33] = new Rule(-5, new int[]{32,-22,-23,-24});
    rules[34] = new Rule(-5, new int[]{32,-22,-23,46,-25});
    rules[35] = new Rule(-5, new int[]{32,-22,-23,-24,46,-25});
    rules[36] = new Rule(-5, new int[]{32,-22,-23,46,-25,-26});
    rules[37] = new Rule(-5, new int[]{32,-22,-23,-26});
    rules[38] = new Rule(-6, new int[]{31,-22});
    rules[39] = new Rule(-6, new int[]{29,-27,8,31,-22});
    rules[40] = new Rule(-6, new int[]{31,-22,62,-25});
    rules[41] = new Rule(-6, new int[]{29,-27,8,31,-22,62,-25});
    rules[42] = new Rule(-7, new int[]{33,-22});
    rules[43] = new Rule(-7, new int[]{29,-27,8,33,-22});
    rules[44] = new Rule(-7, new int[]{33,-22,62,-25});
    rules[45] = new Rule(-7, new int[]{29,-27,8,33,-22,62,-25});
    rules[46] = new Rule(-8, new int[]{38,-22});
    rules[47] = new Rule(-8, new int[]{29,-27,8,38,-22});
    rules[48] = new Rule(-8, new int[]{38,-22,62,-25});
    rules[49] = new Rule(-8, new int[]{29,-27,8,38,-22,62,-25});
    rules[50] = new Rule(-9, new int[]{39,-22});
    rules[51] = new Rule(-9, new int[]{29,-27,8,39,-22});
    rules[52] = new Rule(-9, new int[]{39,-22,62,-25});
    rules[53] = new Rule(-9, new int[]{29,-27,8,39,-22,62,-25});
    rules[54] = new Rule(-10, new int[]{34,-22});
    rules[55] = new Rule(-11, new int[]{35,-22});
    rules[56] = new Rule(-12, new int[]{36,-22,-25});
    rules[57] = new Rule(-13, new int[]{37,-22,-25});
    rules[58] = new Rule(-22, new int[]{-27});
    rules[59] = new Rule(-22, new int[]{-28});
    rules[60] = new Rule(-14, new int[]{29,-27,8,-23});
    rules[61] = new Rule(-15, new int[]{40,-23,42,-1,43});
    rules[62] = new Rule(-15, new int[]{40,-23,42,-1,41,-1,43});
    rules[63] = new Rule(-16, new int[]{26,-1,43});
    rules[64] = new Rule(-16, new int[]{26,20,-29,21,-1,43});
    rules[65] = new Rule(-29, new int[]{-29,22,-30});
    rules[66] = new Rule(-29, new int[]{-30});
    rules[67] = new Rule(-30, new int[]{-27,8,-31});
    rules[68] = new Rule(-17, new int[]{28});
    rules[69] = new Rule(-18, new int[]{27});
    rules[70] = new Rule(-19, new int[]{51,-23});
    rules[71] = new Rule(-19, new int[]{51});
    rules[72] = new Rule(-20, new int[]{52,-25});
    rules[73] = new Rule(-21, new int[]{49,-23});
    rules[74] = new Rule(-23, new int[]{-23,8,-23});
    rules[75] = new Rule(-23, new int[]{-23,10,-23});
    rules[76] = new Rule(-23, new int[]{-23,9,-23});
    rules[77] = new Rule(-23, new int[]{-23,11,-23});
    rules[78] = new Rule(-23, new int[]{-23,12,-23});
    rules[79] = new Rule(-23, new int[]{-23,13,-23});
    rules[80] = new Rule(-23, new int[]{-23,14,-23});
    rules[81] = new Rule(-23, new int[]{-23,5,-23});
    rules[82] = new Rule(-23, new int[]{-23,4,-23});
    rules[83] = new Rule(-23, new int[]{-23,15,-23});
    rules[84] = new Rule(-23, new int[]{-23,16,-23});
    rules[85] = new Rule(-23, new int[]{-23,17,-23});
    rules[86] = new Rule(-23, new int[]{-23,18,-23});
    rules[87] = new Rule(-23, new int[]{19,-23});
    rules[88] = new Rule(-23, new int[]{19,30});
    rules[89] = new Rule(-23, new int[]{19,50});
    rules[90] = new Rule(-23, new int[]{20,-23,21});
    rules[91] = new Rule(-23, new int[]{-32});
    rules[92] = new Rule(-23, new int[]{-27});
    rules[93] = new Rule(-23, new int[]{-28});
    rules[94] = new Rule(-23, new int[]{-25});
    rules[95] = new Rule(-23, new int[]{-33});
    rules[96] = new Rule(-23, new int[]{-34});
    rules[97] = new Rule(-23, new int[]{-35});
    rules[98] = new Rule(-23, new int[]{-36});
    rules[99] = new Rule(-32, new int[]{-27,20,21});
    rules[100] = new Rule(-32, new int[]{-27,20,-37,21});
    rules[101] = new Rule(-37, new int[]{-37,22,-38});
    rules[102] = new Rule(-37, new int[]{-38});
    rules[103] = new Rule(-38, new int[]{-23});
    rules[104] = new Rule(-31, new int[]{-27});
    rules[105] = new Rule(-31, new int[]{-25});
    rules[106] = new Rule(-31, new int[]{-33});
    rules[107] = new Rule(-31, new int[]{-34});
    rules[108] = new Rule(-31, new int[]{-35});
    rules[109] = new Rule(-31, new int[]{-36});
    rules[110] = new Rule(-31, new int[]{-28});
    rules[111] = new Rule(-27, new int[]{56});
    rules[112] = new Rule(-28, new int[]{58});
    rules[113] = new Rule(-25, new int[]{53});
    rules[114] = new Rule(-33, new int[]{54});
    rules[115] = new Rule(-35, new int[]{59});
    rules[116] = new Rule(-35, new int[]{60});
    rules[117] = new Rule(-34, new int[]{55});
    rules[118] = new Rule(-36, new int[]{61});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // stmt_list -> stmt_list, stmt
{ CurrentSemanticValue.n = new(NodeType.StmtList, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 3: // stmt_list -> stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 4: // stmt -> set_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 5: // stmt -> eset_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 6: // stmt -> get_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 7: // stmt -> eget_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 8: // stmt -> exists_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 9: // stmt -> eexists_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 10: // stmt -> delete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 11: // stmt -> edelete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 12: // stmt -> extend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 13: // stmt -> eextend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 14: // stmt -> let_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 15: // stmt -> if_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 16: // stmt -> begin_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 17: // stmt -> commit_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 18: // stmt -> rollback_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 19: // stmt -> return_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 20: // stmt -> sleep_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 21: // stmt -> throw_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 22: // set_stmt -> TSET, key_name, expression
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 23: // set_stmt -> TSET, key_name, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 24: // set_stmt -> TSET, key_name, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 25: // set_stmt -> TSET, key_name, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 26: // set_stmt -> TSET, key_name, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 27: // set_stmt -> TSET, key_name, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 28: // set_not_exists -> TNX
{ CurrentSemanticValue.n = new(NodeType.SetNotExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 29: // set_not_exists -> TXX
{ CurrentSemanticValue.n = new(NodeType.SetExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 30: // set_cmp -> TCMP, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmp, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 31: // set_cmp -> TCMPREV, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmpRev, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 32: // eset_stmt -> TESET, key_name, expression
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 33: // eset_stmt -> TESET, key_name, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 34: // eset_stmt -> TESET, key_name, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 35: // eset_stmt -> TESET, key_name, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 36: // eset_stmt -> TESET, key_name, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 37: // eset_stmt -> TESET, key_name, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 38: // get_stmt -> TGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 39: // get_stmt -> TLET, identifier, TEQUALS, TGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 40: // get_stmt -> TGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 41: // get_stmt -> TLET, identifier, TEQUALS, TGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 42: // eget_stmt -> TEGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 43: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 44: // eget_stmt -> TEGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 45: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 46: // exists_stmt -> TEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 47: // exists_stmt -> TLET, identifier, TEQUALS, TEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 48: // exists_stmt -> TEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 49: // exists_stmt -> TLET, identifier, TEQUALS, TEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 50: // eexists_stmt -> TEEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 51: // eexists_stmt -> TLET, identifier, TEQUALS, TEEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 52: // eexists_stmt -> TEEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 53: // eexists_stmt -> TLET, identifier, TEQUALS, TEEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 54: // delete_stmt -> TDELETE, key_name
{ CurrentSemanticValue.n = new(NodeType.Delete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 55: // edelete_stmt -> TEDELETE, key_name
{ CurrentSemanticValue.n = new(NodeType.Edelete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 56: // extend_stmt -> TEXTEND, key_name, int
{ CurrentSemanticValue.n = new(NodeType.Extend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 57: // eextend_stmt -> TEEXTEND, key_name, int
{ CurrentSemanticValue.n = new(NodeType.Eextend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 58: // key_name -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 59: // key_name -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 60: // let_stmt -> TLET, identifier, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Let, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 61: // if_stmt -> TIF, expression, TTHEN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 62: // if_stmt -> TIF, expression, TTHEN, stmt_list, TELSE, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 63: // begin_stmt -> TBEGIN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 64: // begin_stmt -> TBEGIN, LPAREN, begin_options, RPAREN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 65: // begin_options -> begin_options, TCOMMA, begin_option
{ CurrentSemanticValue.n = new(NodeType.BeginOptionList, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 66: // begin_options -> begin_option
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 67: // begin_option -> identifier, TEQUALS, simple_expr
{ CurrentSemanticValue.n = new(NodeType.BeginOption, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 68: // commit_stmt -> TCOMMIT
{ CurrentSemanticValue.n = new(NodeType.Commit, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 69: // rollback_stmt -> TROLLBACK
{ CurrentSemanticValue.n = new(NodeType.Rollback, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 70: // return_stmt -> TRETURN, expression
{ CurrentSemanticValue.n = new(NodeType.Return, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 71: // return_stmt -> TRETURN
{ CurrentSemanticValue.n = new(NodeType.Return, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 72: // sleep_stmt -> TSLEEP, int
{ CurrentSemanticValue.n = new(NodeType.Sleep, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 73: // throw_stmt -> TTHROW, expression
{ CurrentSemanticValue.n = new(NodeType.Throw, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 74: // expression -> expression, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 75: // expression -> expression, TDOUBLEEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 76: // expression -> expression, TNOTEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.NotEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 77: // expression -> expression, TLESSTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.LessThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 78: // expression -> expression, TGREATERTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 79: // expression -> expression, TLESSTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.LessThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 80: // expression -> expression, TGREATERTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 81: // expression -> expression, TAND, expression
{ CurrentSemanticValue.n = new(NodeType.And, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 82: // expression -> expression, TOR, expression
{ CurrentSemanticValue.n = new(NodeType.Or, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 83: // expression -> expression, TADD, expression
{ CurrentSemanticValue.n = new(NodeType.Add, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 84: // expression -> expression, TMINUS, expression
{ CurrentSemanticValue.n = new(NodeType.Subtract, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 85: // expression -> expression, TMULT, expression
{ CurrentSemanticValue.n = new(NodeType.Mult, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 86: // expression -> expression, TDIV, expression
{ CurrentSemanticValue.n = new(NodeType.Div, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 87: // expression -> TNOT, expression
{ CurrentSemanticValue.n = new(NodeType.Not, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 88: // expression -> TNOT, TSET
{ CurrentSemanticValue.n = new(NodeType.NotSet, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 89: // expression -> TNOT, TFOUND
{ CurrentSemanticValue.n = new(NodeType.NotFound, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 90: // expression -> LPAREN, expression, RPAREN
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-2].l; }
        break;
      case 91: // expression -> fcall_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 92: // expression -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 93: // expression -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 94: // expression -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 95: // expression -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 96: // expression -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 97: // expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 98: // expression -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 99: // fcall_expr -> identifier, LPAREN, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-3].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 100: // fcall_expr -> identifier, LPAREN, fcall_argument_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 101: // fcall_argument_list -> fcall_argument_list, TCOMMA, fcall_argument_item
{ CurrentSemanticValue.n = new(NodeType.ArgumentList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 102: // fcall_argument_list -> fcall_argument_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 103: // fcall_argument_item -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 104: // simple_expr -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 105: // simple_expr -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 106: // simple_expr -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 107: // simple_expr -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 108: // simple_expr -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 109: // simple_expr -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 110: // simple_expr -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 111: // identifier -> TIDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 112: // placeholder -> TPLACEHOLDER
{ CurrentSemanticValue.n = new(NodeType.Placeholder, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 113: // int -> TDIGIT
{ CurrentSemanticValue.n = new(NodeType.IntegerType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 114: // float -> TFLOAT
{ CurrentSemanticValue.n = new(NodeType.FloatType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 115: // boolean -> TTRUE
{ CurrentSemanticValue.n = new(NodeType.BooleanType, null, null, null, null, null, null, "true", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 116: // boolean -> TFALSE
{ CurrentSemanticValue.n = new(NodeType.BooleanType, null, null, null, null, null, null, "false", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 117: // string -> TSTRING
{ CurrentSemanticValue.n = new(NodeType.StringType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 118: // null -> TNULL
{ CurrentSemanticValue.n = new(NodeType.NullType, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
