// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 4/17/2025 12:05:38 PM
// Input file <ScriptParser/ScriptParser.Language.grammar.y - 4/17/2025 12:03:01 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Kahuna.Server.ScriptParser
{
internal enum Token {error=2,EOF=3,TDOUBLEDOT=4,TOR=5,TAND=6,
    TLIKE=7,TILIKE=8,TEQUALS=9,TNOTEQUALS=10,TDOUBLEEQUALS=11,TLESSTHAN=12,
    TGREATERTHAN=13,TLESSTHANEQUALS=14,TGREATERTHANEQUALS=15,TADD=16,TMINUS=17,TMULT=18,
    TDIV=19,TNOT=20,LPAREN=21,RPAREN=22,TCOMMA=23,LBRACE=24,
    RBRACE=25,LSQUAREBRACE=26,RSQUAREBRACE=27,TDOUBLEQUALS=28,TBEGIN=29,TROLLBACK=30,
    TCOMMIT=31,TLET=32,TSET=33,TGET=34,TESET=35,TEGET=36,
    TDELETE=37,TEDELETE=38,TEXTEND=39,TEEXTEND=40,TEXISTS=41,TEEXISTS=42,
    TIF=43,TELSE=44,TTHEN=45,TEND=46,TNX=47,TXX=48,
    TEX=49,TCMP=50,TCMPREV=51,TTHROW=52,TFOUND=53,TFOR=54,
    TDO=55,TIN=56,TRETURN=57,TSLEEP=58,TDIGIT=59,TFLOAT=60,
    TSTRING=61,TIDENTIFIER=62,TESCIDENTIFIER=63,TPLACEHOLDER=64,TTRUE=65,TFALSE=66,
    TNULL=67,TAT=68,TPREFIX=69,TBY=70};

internal partial struct ValueType
{ 
        public NodeAst n;
        public string s;
        public int l;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal partial class scriptParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[129];
  private static State[] states = new State[218];
  private static string[] nonTerms = new string[] {
      "stmt_list", "$accept", "stmt", "set_stmt", "eset_stmt", "get_stmt", "eget_stmt", 
      "exists_stmt", "eexists_stmt", "delete_stmt", "edelete_stmt", "extend_stmt", 
      "eextend_stmt", "get_by_prefix_stmt", "eget_by_prefix_stmt", "let_stmt", 
      "for_stmt", "if_stmt", "begin_stmt", "commit_stmt", "rollback_stmt", "return_stmt", 
      "sleep_stmt", "throw_stmt", "key_name", "expression", "set_cmp", "int", 
      "set_not_exists", "identifier", "placeholder", "begin_options", "begin_option", 
      "simple_expr", "fcall_expr", "float", "string", "boolean", "null", "fcall_argument_list", 
      "fcall_argument_item", };

  static scriptParser() {
    states[0] = new State(new int[]{33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-1,1,-3,204,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[1] = new State(new int[]{3,2,33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-3,3,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-4);
    states[5] = new State(new int[]{62,65,64,67},new int[]{-25,6,-30,83,-31,84});
    states[6] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,7,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[7] = new State(new int[]{49,12,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46,50,79,51,81,47,15,48,16,3,-25,33,-25,35,-25,34,-25,32,-25,36,-25,41,-25,42,-25,37,-25,38,-25,39,-25,40,-25,54,-25,43,-25,29,-25,31,-25,30,-25,57,-25,58,-25,52,-25,46,-25,44,-25},new int[]{-27,8,-29,17});
    states[8] = new State(new int[]{49,9,3,-26,33,-26,35,-26,34,-26,32,-26,36,-26,41,-26,42,-26,37,-26,38,-26,39,-26,40,-26,54,-26,43,-26,29,-26,31,-26,30,-26,57,-26,58,-26,52,-26,46,-26,44,-26});
    states[9] = new State(new int[]{59,11},new int[]{-28,10});
    states[10] = new State(-28);
    states[11] = new State(-123);
    states[12] = new State(new int[]{59,11},new int[]{-28,13});
    states[13] = new State(new int[]{47,15,48,16,3,-27,33,-27,35,-27,34,-27,32,-27,36,-27,41,-27,42,-27,37,-27,38,-27,39,-27,40,-27,54,-27,43,-27,29,-27,31,-27,30,-27,57,-27,58,-27,52,-27,46,-27,44,-27},new int[]{-29,14});
    states[14] = new State(-29);
    states[15] = new State(-31);
    states[16] = new State(-32);
    states[17] = new State(-30);
    states[18] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,19,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[19] = new State(new int[]{9,-82,11,-82,10,-82,12,24,13,26,14,28,15,30,6,-82,5,-82,16,36,17,38,18,40,19,42,4,-82,26,46,49,-82,50,-82,51,-82,47,-82,48,-82,3,-82,33,-82,35,-82,34,-82,32,-82,36,-82,41,-82,42,-82,37,-82,38,-82,39,-82,40,-82,54,-82,43,-82,29,-82,31,-82,30,-82,57,-82,58,-82,52,-82,46,-82,44,-82,27,-82,22,-82,23,-82,55,-82,45,-82});
    states[20] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,21,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[21] = new State(new int[]{9,-83,11,-83,10,-83,12,24,13,26,14,28,15,30,6,-83,5,-83,16,36,17,38,18,40,19,42,4,-83,26,46,49,-83,50,-83,51,-83,47,-83,48,-83,3,-83,33,-83,35,-83,34,-83,32,-83,36,-83,41,-83,42,-83,37,-83,38,-83,39,-83,40,-83,54,-83,43,-83,29,-83,31,-83,30,-83,57,-83,58,-83,52,-83,46,-83,44,-83,27,-83,22,-83,23,-83,55,-83,45,-83});
    states[22] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,23,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[23] = new State(new int[]{9,-84,11,-84,10,-84,12,24,13,26,14,28,15,30,6,-84,5,-84,16,36,17,38,18,40,19,42,4,-84,26,46,49,-84,50,-84,51,-84,47,-84,48,-84,3,-84,33,-84,35,-84,34,-84,32,-84,36,-84,41,-84,42,-84,37,-84,38,-84,39,-84,40,-84,54,-84,43,-84,29,-84,31,-84,30,-84,57,-84,58,-84,52,-84,46,-84,44,-84,27,-84,22,-84,23,-84,55,-84,45,-84});
    states[24] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,25,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[25] = new State(new int[]{9,-85,11,-85,10,-85,12,-85,13,-85,14,-85,15,-85,6,-85,5,-85,16,36,17,38,18,40,19,42,4,-85,26,46,49,-85,50,-85,51,-85,47,-85,48,-85,3,-85,33,-85,35,-85,34,-85,32,-85,36,-85,41,-85,42,-85,37,-85,38,-85,39,-85,40,-85,54,-85,43,-85,29,-85,31,-85,30,-85,57,-85,58,-85,52,-85,46,-85,44,-85,27,-85,22,-85,23,-85,55,-85,45,-85});
    states[26] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,27,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[27] = new State(new int[]{9,-86,11,-86,10,-86,12,-86,13,-86,14,-86,15,-86,6,-86,5,-86,16,36,17,38,18,40,19,42,4,-86,26,46,49,-86,50,-86,51,-86,47,-86,48,-86,3,-86,33,-86,35,-86,34,-86,32,-86,36,-86,41,-86,42,-86,37,-86,38,-86,39,-86,40,-86,54,-86,43,-86,29,-86,31,-86,30,-86,57,-86,58,-86,52,-86,46,-86,44,-86,27,-86,22,-86,23,-86,55,-86,45,-86});
    states[28] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,29,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[29] = new State(new int[]{9,-87,11,-87,10,-87,12,-87,13,-87,14,-87,15,-87,6,-87,5,-87,16,36,17,38,18,40,19,42,4,-87,26,46,49,-87,50,-87,51,-87,47,-87,48,-87,3,-87,33,-87,35,-87,34,-87,32,-87,36,-87,41,-87,42,-87,37,-87,38,-87,39,-87,40,-87,54,-87,43,-87,29,-87,31,-87,30,-87,57,-87,58,-87,52,-87,46,-87,44,-87,27,-87,22,-87,23,-87,55,-87,45,-87});
    states[30] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,31,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[31] = new State(new int[]{9,-88,11,-88,10,-88,12,-88,13,-88,14,-88,15,-88,6,-88,5,-88,16,36,17,38,18,40,19,42,4,-88,26,46,49,-88,50,-88,51,-88,47,-88,48,-88,3,-88,33,-88,35,-88,34,-88,32,-88,36,-88,41,-88,42,-88,37,-88,38,-88,39,-88,40,-88,54,-88,43,-88,29,-88,31,-88,30,-88,57,-88,58,-88,52,-88,46,-88,44,-88,27,-88,22,-88,23,-88,55,-88,45,-88});
    states[32] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,33,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[33] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,-89,5,-89,16,36,17,38,18,40,19,42,4,-89,26,46,49,-89,50,-89,51,-89,47,-89,48,-89,3,-89,33,-89,35,-89,34,-89,32,-89,36,-89,41,-89,42,-89,37,-89,38,-89,39,-89,40,-89,54,-89,43,-89,29,-89,31,-89,30,-89,57,-89,58,-89,52,-89,46,-89,44,-89,27,-89,22,-89,23,-89,55,-89,45,-89});
    states[34] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,35,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[35] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,-90,16,36,17,38,18,40,19,42,4,-90,26,46,49,-90,50,-90,51,-90,47,-90,48,-90,3,-90,33,-90,35,-90,34,-90,32,-90,36,-90,41,-90,42,-90,37,-90,38,-90,39,-90,40,-90,54,-90,43,-90,29,-90,31,-90,30,-90,57,-90,58,-90,52,-90,46,-90,44,-90,27,-90,22,-90,23,-90,55,-90,45,-90});
    states[36] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,37,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[37] = new State(new int[]{9,-91,11,-91,10,-91,12,-91,13,-91,14,-91,15,-91,6,-91,5,-91,16,-91,17,-91,18,40,19,42,4,-91,26,46,49,-91,50,-91,51,-91,47,-91,48,-91,3,-91,33,-91,35,-91,34,-91,32,-91,36,-91,41,-91,42,-91,37,-91,38,-91,39,-91,40,-91,54,-91,43,-91,29,-91,31,-91,30,-91,57,-91,58,-91,52,-91,46,-91,44,-91,27,-91,22,-91,23,-91,55,-91,45,-91});
    states[38] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,39,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[39] = new State(new int[]{9,-92,11,-92,10,-92,12,-92,13,-92,14,-92,15,-92,6,-92,5,-92,16,-92,17,-92,18,40,19,42,4,-92,26,46,49,-92,50,-92,51,-92,47,-92,48,-92,3,-92,33,-92,35,-92,34,-92,32,-92,36,-92,41,-92,42,-92,37,-92,38,-92,39,-92,40,-92,54,-92,43,-92,29,-92,31,-92,30,-92,57,-92,58,-92,52,-92,46,-92,44,-92,27,-92,22,-92,23,-92,55,-92,45,-92});
    states[40] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,41,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[41] = new State(new int[]{9,-93,11,-93,10,-93,12,-93,13,-93,14,-93,15,-93,6,-93,5,-93,16,-93,17,-93,18,-93,19,-93,4,-93,26,46,49,-93,50,-93,51,-93,47,-93,48,-93,3,-93,33,-93,35,-93,34,-93,32,-93,36,-93,41,-93,42,-93,37,-93,38,-93,39,-93,40,-93,54,-93,43,-93,29,-93,31,-93,30,-93,57,-93,58,-93,52,-93,46,-93,44,-93,27,-93,22,-93,23,-93,55,-93,45,-93});
    states[42] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,43,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[43] = new State(new int[]{9,-94,11,-94,10,-94,12,-94,13,-94,14,-94,15,-94,6,-94,5,-94,16,-94,17,-94,18,-94,19,-94,4,-94,26,46,49,-94,50,-94,51,-94,47,-94,48,-94,3,-94,33,-94,35,-94,34,-94,32,-94,36,-94,41,-94,42,-94,37,-94,38,-94,39,-94,40,-94,54,-94,43,-94,29,-94,31,-94,30,-94,57,-94,58,-94,52,-94,46,-94,44,-94,27,-94,22,-94,23,-94,55,-94,45,-94});
    states[44] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,45,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[45] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,-95,26,46,49,-95,50,-95,51,-95,47,-95,48,-95,3,-95,33,-95,35,-95,34,-95,32,-95,36,-95,41,-95,42,-95,37,-95,38,-95,39,-95,40,-95,54,-95,43,-95,29,-95,31,-95,30,-95,57,-95,58,-95,52,-95,46,-95,44,-95,27,-95,22,-95,23,-95,55,-95,45,-95});
    states[46] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,47,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[47] = new State(new int[]{27,48,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46});
    states[48] = new State(-99);
    states[49] = new State(new int[]{33,51,53,52,20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,50,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[50] = new State(new int[]{9,-96,11,-96,10,-96,12,-96,13,-96,14,-96,15,-96,6,-96,5,-96,16,-96,17,-96,18,-96,19,-96,4,-96,26,46,49,-96,50,-96,51,-96,47,-96,48,-96,3,-96,33,-96,35,-96,34,-96,32,-96,36,-96,41,-96,42,-96,37,-96,38,-96,39,-96,40,-96,54,-96,43,-96,29,-96,31,-96,30,-96,57,-96,58,-96,52,-96,46,-96,44,-96,27,-96,22,-96,23,-96,55,-96,45,-96});
    states[51] = new State(-97);
    states[52] = new State(-98);
    states[53] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,54,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[54] = new State(new int[]{22,55,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46});
    states[55] = new State(-100);
    states[56] = new State(-101);
    states[57] = new State(new int[]{21,58,49,-102,9,-102,11,-102,10,-102,12,-102,13,-102,14,-102,15,-102,6,-102,5,-102,16,-102,17,-102,18,-102,19,-102,4,-102,26,-102,50,-102,51,-102,47,-102,48,-102,3,-102,33,-102,35,-102,34,-102,32,-102,36,-102,41,-102,42,-102,37,-102,38,-102,39,-102,40,-102,54,-102,43,-102,29,-102,31,-102,30,-102,57,-102,58,-102,52,-102,46,-102,44,-102,27,-102,22,-102,23,-102,55,-102,45,-102});
    states[58] = new State(new int[]{22,59,20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-40,60,-41,78,-26,64,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[59] = new State(-109);
    states[60] = new State(new int[]{22,61,23,62});
    states[61] = new State(-110);
    states[62] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-41,63,-26,64,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[63] = new State(-111);
    states[64] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46,22,-113,23,-113});
    states[65] = new State(-121);
    states[66] = new State(-103);
    states[67] = new State(-122);
    states[68] = new State(-104);
    states[69] = new State(-105);
    states[70] = new State(-124);
    states[71] = new State(-106);
    states[72] = new State(-127);
    states[73] = new State(-107);
    states[74] = new State(-125);
    states[75] = new State(-126);
    states[76] = new State(-108);
    states[77] = new State(-128);
    states[78] = new State(-112);
    states[79] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,80,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[80] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46,49,-33,3,-33,33,-33,35,-33,34,-33,32,-33,36,-33,41,-33,42,-33,37,-33,38,-33,39,-33,40,-33,54,-33,43,-33,29,-33,31,-33,30,-33,57,-33,58,-33,52,-33,46,-33,44,-33});
    states[81] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,82,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[82] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46,49,-34,3,-34,33,-34,35,-34,34,-34,32,-34,36,-34,41,-34,42,-34,37,-34,38,-34,39,-34,40,-34,54,-34,43,-34,29,-34,31,-34,30,-34,57,-34,58,-34,52,-34,46,-34,44,-34});
    states[83] = new State(-65);
    states[84] = new State(-66);
    states[85] = new State(-5);
    states[86] = new State(new int[]{62,65,64,67},new int[]{-25,87,-30,83,-31,84});
    states[87] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,88,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[88] = new State(new int[]{49,92,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46,50,79,51,81,47,15,48,16,3,-35,33,-35,35,-35,34,-35,32,-35,36,-35,41,-35,42,-35,37,-35,38,-35,39,-35,40,-35,54,-35,43,-35,29,-35,31,-35,30,-35,57,-35,58,-35,52,-35,46,-35,44,-35},new int[]{-27,89,-29,95});
    states[89] = new State(new int[]{49,90,3,-36,33,-36,35,-36,34,-36,32,-36,36,-36,41,-36,42,-36,37,-36,38,-36,39,-36,40,-36,54,-36,43,-36,29,-36,31,-36,30,-36,57,-36,58,-36,52,-36,46,-36,44,-36});
    states[90] = new State(new int[]{59,11},new int[]{-28,91});
    states[91] = new State(-38);
    states[92] = new State(new int[]{59,11},new int[]{-28,93});
    states[93] = new State(new int[]{47,15,48,16,3,-37,33,-37,35,-37,34,-37,32,-37,36,-37,41,-37,42,-37,37,-37,38,-37,39,-37,40,-37,54,-37,43,-37,29,-37,31,-37,30,-37,57,-37,58,-37,52,-37,46,-37,44,-37},new int[]{-29,94});
    states[94] = new State(-39);
    states[95] = new State(-40);
    states[96] = new State(-6);
    states[97] = new State(new int[]{70,101,62,65,64,67},new int[]{-25,98,-30,83,-31,84});
    states[98] = new State(new int[]{68,99,3,-41,33,-41,35,-41,34,-41,32,-41,36,-41,41,-41,42,-41,37,-41,38,-41,39,-41,40,-41,54,-41,43,-41,29,-41,31,-41,30,-41,57,-41,58,-41,52,-41,46,-41,44,-41});
    states[99] = new State(new int[]{59,11},new int[]{-28,100});
    states[100] = new State(-43);
    states[101] = new State(new int[]{69,102});
    states[102] = new State(new int[]{62,65,64,67},new int[]{-25,103,-30,83,-31,84});
    states[103] = new State(-61);
    states[104] = new State(new int[]{62,65},new int[]{-30,105});
    states[105] = new State(new int[]{9,106});
    states[106] = new State(new int[]{34,107,36,114,41,121,42,125,20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,129,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[107] = new State(new int[]{70,111,62,65,64,67},new int[]{-25,108,-30,83,-31,84});
    states[108] = new State(new int[]{68,109,3,-42,33,-42,35,-42,34,-42,32,-42,36,-42,41,-42,42,-42,37,-42,38,-42,39,-42,40,-42,54,-42,43,-42,29,-42,31,-42,30,-42,57,-42,58,-42,52,-42,46,-42,44,-42});
    states[109] = new State(new int[]{59,11},new int[]{-28,110});
    states[110] = new State(-44);
    states[111] = new State(new int[]{69,112});
    states[112] = new State(new int[]{62,65,64,67},new int[]{-25,113,-30,83,-31,84});
    states[113] = new State(-62);
    states[114] = new State(new int[]{70,118,62,65,64,67},new int[]{-25,115,-30,83,-31,84});
    states[115] = new State(new int[]{68,116,3,-46,33,-46,35,-46,34,-46,32,-46,36,-46,41,-46,42,-46,37,-46,38,-46,39,-46,40,-46,54,-46,43,-46,29,-46,31,-46,30,-46,57,-46,58,-46,52,-46,46,-46,44,-46});
    states[116] = new State(new int[]{59,11},new int[]{-28,117});
    states[117] = new State(-48);
    states[118] = new State(new int[]{69,119});
    states[119] = new State(new int[]{62,65,64,67},new int[]{-25,120,-30,83,-31,84});
    states[120] = new State(-64);
    states[121] = new State(new int[]{62,65,64,67},new int[]{-25,122,-30,83,-31,84});
    states[122] = new State(new int[]{68,123,3,-50,33,-50,35,-50,34,-50,32,-50,36,-50,41,-50,42,-50,37,-50,38,-50,39,-50,40,-50,54,-50,43,-50,29,-50,31,-50,30,-50,57,-50,58,-50,52,-50,46,-50,44,-50});
    states[123] = new State(new int[]{59,11},new int[]{-28,124});
    states[124] = new State(-52);
    states[125] = new State(new int[]{62,65,64,67},new int[]{-25,126,-30,83,-31,84});
    states[126] = new State(new int[]{68,127,3,-54,33,-54,35,-54,34,-54,32,-54,36,-54,41,-54,42,-54,37,-54,38,-54,39,-54,40,-54,54,-54,43,-54,29,-54,31,-54,30,-54,57,-54,58,-54,52,-54,46,-54,44,-54});
    states[127] = new State(new int[]{59,11},new int[]{-28,128});
    states[128] = new State(-56);
    states[129] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46,3,-67,33,-67,35,-67,34,-67,32,-67,36,-67,41,-67,42,-67,37,-67,38,-67,39,-67,40,-67,54,-67,43,-67,29,-67,31,-67,30,-67,57,-67,58,-67,52,-67,46,-67,44,-67});
    states[130] = new State(-7);
    states[131] = new State(new int[]{70,135,62,65,64,67},new int[]{-25,132,-30,83,-31,84});
    states[132] = new State(new int[]{68,133,3,-45,33,-45,35,-45,34,-45,32,-45,36,-45,41,-45,42,-45,37,-45,38,-45,39,-45,40,-45,54,-45,43,-45,29,-45,31,-45,30,-45,57,-45,58,-45,52,-45,46,-45,44,-45});
    states[133] = new State(new int[]{59,11},new int[]{-28,134});
    states[134] = new State(-47);
    states[135] = new State(new int[]{69,136});
    states[136] = new State(new int[]{62,65,64,67},new int[]{-25,137,-30,83,-31,84});
    states[137] = new State(-63);
    states[138] = new State(-8);
    states[139] = new State(new int[]{62,65,64,67},new int[]{-25,140,-30,83,-31,84});
    states[140] = new State(new int[]{68,141,3,-49,33,-49,35,-49,34,-49,32,-49,36,-49,41,-49,42,-49,37,-49,38,-49,39,-49,40,-49,54,-49,43,-49,29,-49,31,-49,30,-49,57,-49,58,-49,52,-49,46,-49,44,-49});
    states[141] = new State(new int[]{59,11},new int[]{-28,142});
    states[142] = new State(-51);
    states[143] = new State(-9);
    states[144] = new State(new int[]{62,65,64,67},new int[]{-25,145,-30,83,-31,84});
    states[145] = new State(new int[]{68,146,3,-53,33,-53,35,-53,34,-53,32,-53,36,-53,41,-53,42,-53,37,-53,38,-53,39,-53,40,-53,54,-53,43,-53,29,-53,31,-53,30,-53,57,-53,58,-53,52,-53,46,-53,44,-53});
    states[146] = new State(new int[]{59,11},new int[]{-28,147});
    states[147] = new State(-55);
    states[148] = new State(-10);
    states[149] = new State(new int[]{62,65,64,67},new int[]{-25,150,-30,83,-31,84});
    states[150] = new State(-57);
    states[151] = new State(-11);
    states[152] = new State(new int[]{62,65,64,67},new int[]{-25,153,-30,83,-31,84});
    states[153] = new State(-58);
    states[154] = new State(-12);
    states[155] = new State(new int[]{62,65,64,67},new int[]{-25,156,-30,83,-31,84});
    states[156] = new State(new int[]{59,11},new int[]{-28,157});
    states[157] = new State(-59);
    states[158] = new State(-13);
    states[159] = new State(new int[]{62,65,64,67},new int[]{-25,160,-30,83,-31,84});
    states[160] = new State(new int[]{59,11},new int[]{-28,161});
    states[161] = new State(-60);
    states[162] = new State(-14);
    states[163] = new State(-15);
    states[164] = new State(-16);
    states[165] = new State(-17);
    states[166] = new State(new int[]{62,65},new int[]{-30,167});
    states[167] = new State(new int[]{56,168});
    states[168] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,169,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[169] = new State(new int[]{55,170,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46});
    states[170] = new State(new int[]{33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-1,171,-3,204,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[171] = new State(new int[]{46,172,33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-3,3,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[172] = new State(-70);
    states[173] = new State(-18);
    states[174] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,175,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[175] = new State(new int[]{45,176,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46});
    states[176] = new State(new int[]{33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-1,177,-3,204,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[177] = new State(new int[]{46,178,44,179,33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-3,3,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[178] = new State(-68);
    states[179] = new State(new int[]{33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-1,180,-3,204,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[180] = new State(new int[]{46,181,33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-3,3,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[181] = new State(-69);
    states[182] = new State(-19);
    states[183] = new State(new int[]{21,199,33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-1,184,-3,204,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[184] = new State(new int[]{46,185,33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-3,3,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[185] = new State(-71);
    states[186] = new State(-20);
    states[187] = new State(-76);
    states[188] = new State(-21);
    states[189] = new State(-77);
    states[190] = new State(-22);
    states[191] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77,3,-79,33,-79,35,-79,34,-79,32,-79,36,-79,41,-79,42,-79,37,-79,38,-79,39,-79,40,-79,54,-79,43,-79,29,-79,31,-79,30,-79,57,-79,58,-79,52,-79,46,-79,44,-79},new int[]{-26,192,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[192] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46,3,-78,33,-78,35,-78,34,-78,32,-78,36,-78,41,-78,42,-78,37,-78,38,-78,39,-78,40,-78,54,-78,43,-78,29,-78,31,-78,30,-78,57,-78,58,-78,52,-78,46,-78,44,-78});
    states[193] = new State(-23);
    states[194] = new State(new int[]{59,11},new int[]{-28,195});
    states[195] = new State(-80);
    states[196] = new State(-24);
    states[197] = new State(new int[]{20,49,21,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-26,198,-35,56,-30,57,-31,66,-28,68,-36,69,-37,71,-38,73,-39,76});
    states[198] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,26,46,3,-81,33,-81,35,-81,34,-81,32,-81,36,-81,41,-81,42,-81,37,-81,38,-81,39,-81,40,-81,54,-81,43,-81,29,-81,31,-81,30,-81,57,-81,58,-81,52,-81,46,-81,44,-81});
    states[199] = new State(new int[]{62,65},new int[]{-32,200,-33,217,-30,207});
    states[200] = new State(new int[]{22,201,23,205});
    states[201] = new State(new int[]{33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-1,202,-3,204,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[202] = new State(new int[]{46,203,33,5,35,86,34,97,32,104,36,131,41,139,42,144,37,149,38,152,39,155,40,159,54,166,43,174,29,183,31,187,30,189,57,191,58,194,52,197},new int[]{-3,3,-4,4,-5,85,-6,96,-7,130,-8,138,-9,143,-10,148,-11,151,-12,154,-13,158,-14,162,-15,163,-16,164,-17,165,-18,173,-19,182,-20,186,-21,188,-22,190,-23,193,-24,196});
    states[203] = new State(-72);
    states[204] = new State(-3);
    states[205] = new State(new int[]{62,65},new int[]{-33,206,-30,207});
    states[206] = new State(-73);
    states[207] = new State(new int[]{9,208});
    states[208] = new State(new int[]{62,65,59,11,60,70,61,72,65,74,66,75,67,77,64,67},new int[]{-34,209,-30,210,-28,211,-36,212,-37,213,-38,214,-39,215,-31,216});
    states[209] = new State(-75);
    states[210] = new State(-114);
    states[211] = new State(-115);
    states[212] = new State(-116);
    states[213] = new State(-117);
    states[214] = new State(-118);
    states[215] = new State(-119);
    states[216] = new State(-120);
    states[217] = new State(-74);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-6});
    rules[7] = new Rule(-3, new int[]{-7});
    rules[8] = new Rule(-3, new int[]{-8});
    rules[9] = new Rule(-3, new int[]{-9});
    rules[10] = new Rule(-3, new int[]{-10});
    rules[11] = new Rule(-3, new int[]{-11});
    rules[12] = new Rule(-3, new int[]{-12});
    rules[13] = new Rule(-3, new int[]{-13});
    rules[14] = new Rule(-3, new int[]{-14});
    rules[15] = new Rule(-3, new int[]{-15});
    rules[16] = new Rule(-3, new int[]{-16});
    rules[17] = new Rule(-3, new int[]{-17});
    rules[18] = new Rule(-3, new int[]{-18});
    rules[19] = new Rule(-3, new int[]{-19});
    rules[20] = new Rule(-3, new int[]{-20});
    rules[21] = new Rule(-3, new int[]{-21});
    rules[22] = new Rule(-3, new int[]{-22});
    rules[23] = new Rule(-3, new int[]{-23});
    rules[24] = new Rule(-3, new int[]{-24});
    rules[25] = new Rule(-4, new int[]{33,-25,-26});
    rules[26] = new Rule(-4, new int[]{33,-25,-26,-27});
    rules[27] = new Rule(-4, new int[]{33,-25,-26,49,-28});
    rules[28] = new Rule(-4, new int[]{33,-25,-26,-27,49,-28});
    rules[29] = new Rule(-4, new int[]{33,-25,-26,49,-28,-29});
    rules[30] = new Rule(-4, new int[]{33,-25,-26,-29});
    rules[31] = new Rule(-29, new int[]{47});
    rules[32] = new Rule(-29, new int[]{48});
    rules[33] = new Rule(-27, new int[]{50,-26});
    rules[34] = new Rule(-27, new int[]{51,-26});
    rules[35] = new Rule(-5, new int[]{35,-25,-26});
    rules[36] = new Rule(-5, new int[]{35,-25,-26,-27});
    rules[37] = new Rule(-5, new int[]{35,-25,-26,49,-28});
    rules[38] = new Rule(-5, new int[]{35,-25,-26,-27,49,-28});
    rules[39] = new Rule(-5, new int[]{35,-25,-26,49,-28,-29});
    rules[40] = new Rule(-5, new int[]{35,-25,-26,-29});
    rules[41] = new Rule(-6, new int[]{34,-25});
    rules[42] = new Rule(-6, new int[]{32,-30,9,34,-25});
    rules[43] = new Rule(-6, new int[]{34,-25,68,-28});
    rules[44] = new Rule(-6, new int[]{32,-30,9,34,-25,68,-28});
    rules[45] = new Rule(-7, new int[]{36,-25});
    rules[46] = new Rule(-7, new int[]{32,-30,9,36,-25});
    rules[47] = new Rule(-7, new int[]{36,-25,68,-28});
    rules[48] = new Rule(-7, new int[]{32,-30,9,36,-25,68,-28});
    rules[49] = new Rule(-8, new int[]{41,-25});
    rules[50] = new Rule(-8, new int[]{32,-30,9,41,-25});
    rules[51] = new Rule(-8, new int[]{41,-25,68,-28});
    rules[52] = new Rule(-8, new int[]{32,-30,9,41,-25,68,-28});
    rules[53] = new Rule(-9, new int[]{42,-25});
    rules[54] = new Rule(-9, new int[]{32,-30,9,42,-25});
    rules[55] = new Rule(-9, new int[]{42,-25,68,-28});
    rules[56] = new Rule(-9, new int[]{32,-30,9,42,-25,68,-28});
    rules[57] = new Rule(-10, new int[]{37,-25});
    rules[58] = new Rule(-11, new int[]{38,-25});
    rules[59] = new Rule(-12, new int[]{39,-25,-28});
    rules[60] = new Rule(-13, new int[]{40,-25,-28});
    rules[61] = new Rule(-14, new int[]{34,70,69,-25});
    rules[62] = new Rule(-14, new int[]{32,-30,9,34,70,69,-25});
    rules[63] = new Rule(-15, new int[]{36,70,69,-25});
    rules[64] = new Rule(-15, new int[]{32,-30,9,36,70,69,-25});
    rules[65] = new Rule(-25, new int[]{-30});
    rules[66] = new Rule(-25, new int[]{-31});
    rules[67] = new Rule(-16, new int[]{32,-30,9,-26});
    rules[68] = new Rule(-18, new int[]{43,-26,45,-1,46});
    rules[69] = new Rule(-18, new int[]{43,-26,45,-1,44,-1,46});
    rules[70] = new Rule(-17, new int[]{54,-30,56,-26,55,-1,46});
    rules[71] = new Rule(-19, new int[]{29,-1,46});
    rules[72] = new Rule(-19, new int[]{29,21,-32,22,-1,46});
    rules[73] = new Rule(-32, new int[]{-32,23,-33});
    rules[74] = new Rule(-32, new int[]{-33});
    rules[75] = new Rule(-33, new int[]{-30,9,-34});
    rules[76] = new Rule(-20, new int[]{31});
    rules[77] = new Rule(-21, new int[]{30});
    rules[78] = new Rule(-22, new int[]{57,-26});
    rules[79] = new Rule(-22, new int[]{57});
    rules[80] = new Rule(-23, new int[]{58,-28});
    rules[81] = new Rule(-24, new int[]{52,-26});
    rules[82] = new Rule(-26, new int[]{-26,9,-26});
    rules[83] = new Rule(-26, new int[]{-26,11,-26});
    rules[84] = new Rule(-26, new int[]{-26,10,-26});
    rules[85] = new Rule(-26, new int[]{-26,12,-26});
    rules[86] = new Rule(-26, new int[]{-26,13,-26});
    rules[87] = new Rule(-26, new int[]{-26,14,-26});
    rules[88] = new Rule(-26, new int[]{-26,15,-26});
    rules[89] = new Rule(-26, new int[]{-26,6,-26});
    rules[90] = new Rule(-26, new int[]{-26,5,-26});
    rules[91] = new Rule(-26, new int[]{-26,16,-26});
    rules[92] = new Rule(-26, new int[]{-26,17,-26});
    rules[93] = new Rule(-26, new int[]{-26,18,-26});
    rules[94] = new Rule(-26, new int[]{-26,19,-26});
    rules[95] = new Rule(-26, new int[]{-26,4,-26});
    rules[96] = new Rule(-26, new int[]{20,-26});
    rules[97] = new Rule(-26, new int[]{20,33});
    rules[98] = new Rule(-26, new int[]{20,53});
    rules[99] = new Rule(-26, new int[]{-26,26,-26,27});
    rules[100] = new Rule(-26, new int[]{21,-26,22});
    rules[101] = new Rule(-26, new int[]{-35});
    rules[102] = new Rule(-26, new int[]{-30});
    rules[103] = new Rule(-26, new int[]{-31});
    rules[104] = new Rule(-26, new int[]{-28});
    rules[105] = new Rule(-26, new int[]{-36});
    rules[106] = new Rule(-26, new int[]{-37});
    rules[107] = new Rule(-26, new int[]{-38});
    rules[108] = new Rule(-26, new int[]{-39});
    rules[109] = new Rule(-35, new int[]{-30,21,22});
    rules[110] = new Rule(-35, new int[]{-30,21,-40,22});
    rules[111] = new Rule(-40, new int[]{-40,23,-41});
    rules[112] = new Rule(-40, new int[]{-41});
    rules[113] = new Rule(-41, new int[]{-26});
    rules[114] = new Rule(-34, new int[]{-30});
    rules[115] = new Rule(-34, new int[]{-28});
    rules[116] = new Rule(-34, new int[]{-36});
    rules[117] = new Rule(-34, new int[]{-37});
    rules[118] = new Rule(-34, new int[]{-38});
    rules[119] = new Rule(-34, new int[]{-39});
    rules[120] = new Rule(-34, new int[]{-31});
    rules[121] = new Rule(-30, new int[]{62});
    rules[122] = new Rule(-31, new int[]{64});
    rules[123] = new Rule(-28, new int[]{59});
    rules[124] = new Rule(-36, new int[]{60});
    rules[125] = new Rule(-38, new int[]{65});
    rules[126] = new Rule(-38, new int[]{66});
    rules[127] = new Rule(-37, new int[]{61});
    rules[128] = new Rule(-39, new int[]{67});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // stmt_list -> stmt_list, stmt
{ CurrentSemanticValue.n = new(NodeType.StmtList, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 3: // stmt_list -> stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 4: // stmt -> set_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 5: // stmt -> eset_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 6: // stmt -> get_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 7: // stmt -> eget_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 8: // stmt -> exists_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 9: // stmt -> eexists_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 10: // stmt -> delete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 11: // stmt -> edelete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 12: // stmt -> extend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 13: // stmt -> eextend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 14: // stmt -> get_by_prefix_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 15: // stmt -> eget_by_prefix_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 16: // stmt -> let_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 17: // stmt -> for_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 18: // stmt -> if_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 19: // stmt -> begin_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 20: // stmt -> commit_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 21: // stmt -> rollback_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 22: // stmt -> return_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 23: // stmt -> sleep_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 24: // stmt -> throw_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 25: // set_stmt -> TSET, key_name, expression
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 26: // set_stmt -> TSET, key_name, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 27: // set_stmt -> TSET, key_name, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 28: // set_stmt -> TSET, key_name, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 29: // set_stmt -> TSET, key_name, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 30: // set_stmt -> TSET, key_name, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 31: // set_not_exists -> TNX
{ CurrentSemanticValue.n = new(NodeType.SetNotExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 32: // set_not_exists -> TXX
{ CurrentSemanticValue.n = new(NodeType.SetExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 33: // set_cmp -> TCMP, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmp, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 34: // set_cmp -> TCMPREV, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmpRev, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 35: // eset_stmt -> TESET, key_name, expression
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 36: // eset_stmt -> TESET, key_name, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 37: // eset_stmt -> TESET, key_name, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 38: // eset_stmt -> TESET, key_name, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 39: // eset_stmt -> TESET, key_name, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 40: // eset_stmt -> TESET, key_name, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 41: // get_stmt -> TGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 42: // get_stmt -> TLET, identifier, TEQUALS, TGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 43: // get_stmt -> TGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 44: // get_stmt -> TLET, identifier, TEQUALS, TGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 45: // eget_stmt -> TEGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 46: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 47: // eget_stmt -> TEGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 48: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 49: // exists_stmt -> TEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 50: // exists_stmt -> TLET, identifier, TEQUALS, TEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 51: // exists_stmt -> TEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 52: // exists_stmt -> TLET, identifier, TEQUALS, TEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 53: // eexists_stmt -> TEEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 54: // eexists_stmt -> TLET, identifier, TEQUALS, TEEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 55: // eexists_stmt -> TEEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 56: // eexists_stmt -> TLET, identifier, TEQUALS, TEEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 57: // delete_stmt -> TDELETE, key_name
{ CurrentSemanticValue.n = new(NodeType.Delete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 58: // edelete_stmt -> TEDELETE, key_name
{ CurrentSemanticValue.n = new(NodeType.Edelete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 59: // extend_stmt -> TEXTEND, key_name, int
{ CurrentSemanticValue.n = new(NodeType.Extend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 60: // eextend_stmt -> TEEXTEND, key_name, int
{ CurrentSemanticValue.n = new(NodeType.Eextend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 61: // get_by_prefix_stmt -> TGET, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.GetByPrefix, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 62: // get_by_prefix_stmt -> TLET, identifier, TEQUALS, TGET, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.GetByPrefix, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-6].n, null, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 63: // eget_by_prefix_stmt -> TEGET, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.EgetByPrefix, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 64: // eget_by_prefix_stmt -> TLET, identifier, TEQUALS, TEGET, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.EgetByPrefix, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-6].n, null, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 65: // key_name -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 66: // key_name -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 67: // let_stmt -> TLET, identifier, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Let, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 68: // if_stmt -> TIF, expression, TTHEN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 69: // if_stmt -> TIF, expression, TTHEN, stmt_list, TELSE, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 70: // for_stmt -> TFOR, identifier, TIN, expression, TDO, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.For, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 71: // begin_stmt -> TBEGIN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 72: // begin_stmt -> TBEGIN, LPAREN, begin_options, RPAREN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 73: // begin_options -> begin_options, TCOMMA, begin_option
{ CurrentSemanticValue.n = new(NodeType.BeginOptionList, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 74: // begin_options -> begin_option
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 75: // begin_option -> identifier, TEQUALS, simple_expr
{ CurrentSemanticValue.n = new(NodeType.BeginOption, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 76: // commit_stmt -> TCOMMIT
{ CurrentSemanticValue.n = new(NodeType.Commit, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 77: // rollback_stmt -> TROLLBACK
{ CurrentSemanticValue.n = new(NodeType.Rollback, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 78: // return_stmt -> TRETURN, expression
{ CurrentSemanticValue.n = new(NodeType.Return, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 79: // return_stmt -> TRETURN
{ CurrentSemanticValue.n = new(NodeType.Return, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 80: // sleep_stmt -> TSLEEP, int
{ CurrentSemanticValue.n = new(NodeType.Sleep, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 81: // throw_stmt -> TTHROW, expression
{ CurrentSemanticValue.n = new(NodeType.Throw, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 82: // expression -> expression, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 83: // expression -> expression, TDOUBLEEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 84: // expression -> expression, TNOTEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.NotEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 85: // expression -> expression, TLESSTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.LessThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 86: // expression -> expression, TGREATERTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 87: // expression -> expression, TLESSTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.LessThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 88: // expression -> expression, TGREATERTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 89: // expression -> expression, TAND, expression
{ CurrentSemanticValue.n = new(NodeType.And, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 90: // expression -> expression, TOR, expression
{ CurrentSemanticValue.n = new(NodeType.Or, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 91: // expression -> expression, TADD, expression
{ CurrentSemanticValue.n = new(NodeType.Add, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 92: // expression -> expression, TMINUS, expression
{ CurrentSemanticValue.n = new(NodeType.Subtract, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 93: // expression -> expression, TMULT, expression
{ CurrentSemanticValue.n = new(NodeType.Mult, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 94: // expression -> expression, TDIV, expression
{ CurrentSemanticValue.n = new(NodeType.Div, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 95: // expression -> expression, TDOUBLEDOT, expression
{ CurrentSemanticValue.n = new(NodeType.Range, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 96: // expression -> TNOT, expression
{ CurrentSemanticValue.n = new(NodeType.Not, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 97: // expression -> TNOT, TSET
{ CurrentSemanticValue.n = new(NodeType.NotSet, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 98: // expression -> TNOT, TFOUND
{ CurrentSemanticValue.n = new(NodeType.NotFound, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 99: // expression -> expression, LSQUAREBRACE, expression, RSQUAREBRACE
{ CurrentSemanticValue.n = new(NodeType.ArrayIndex, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 100: // expression -> LPAREN, expression, RPAREN
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-2].l; }
        break;
      case 101: // expression -> fcall_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 102: // expression -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 103: // expression -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 104: // expression -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 105: // expression -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 106: // expression -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 107: // expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 108: // expression -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 109: // fcall_expr -> identifier, LPAREN, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-3].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 110: // fcall_expr -> identifier, LPAREN, fcall_argument_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 111: // fcall_argument_list -> fcall_argument_list, TCOMMA, fcall_argument_item
{ CurrentSemanticValue.n = new(NodeType.ArgumentList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 112: // fcall_argument_list -> fcall_argument_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 113: // fcall_argument_item -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 114: // simple_expr -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 115: // simple_expr -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 116: // simple_expr -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 117: // simple_expr -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 118: // simple_expr -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 119: // simple_expr -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 120: // simple_expr -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 121: // identifier -> TIDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 122: // placeholder -> TPLACEHOLDER
{ CurrentSemanticValue.n = new(NodeType.Placeholder, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 123: // int -> TDIGIT
{ CurrentSemanticValue.n = new(NodeType.IntegerType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 124: // float -> TFLOAT
{ CurrentSemanticValue.n = new(NodeType.FloatType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 125: // boolean -> TTRUE
{ CurrentSemanticValue.n = new(NodeType.BooleanType, null, null, null, null, null, null, "true", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 126: // boolean -> TFALSE
{ CurrentSemanticValue.n = new(NodeType.BooleanType, null, null, null, null, null, null, "false", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 127: // string -> TSTRING
{ CurrentSemanticValue.n = new(NodeType.StringType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 128: // null -> TNULL
{ CurrentSemanticValue.n = new(NodeType.NullType, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
