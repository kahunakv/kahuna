// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 5/1/2025 11:10:52 AM
// Input file <ScriptParser/ScriptParser.Language.grammar.y - 5/1/2025 11:10:35 AM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Kahuna.Server.ScriptParser
{
internal enum Token {error=2,EOF=3,TDOUBLEDOT=4,TOR=5,TAND=6,
    TLIKE=7,TILIKE=8,TEQUALS=9,TNOTEQUALS=10,TDOUBLEEQUALS=11,TLESSTHAN=12,
    TGREATERTHAN=13,TLESSTHANEQUALS=14,TGREATERTHANEQUALS=15,TADD=16,TMINUS=17,TMULT=18,
    TDIV=19,TNOT=20,LSQUAREBRACE=21,LPAREN=22,RPAREN=23,TCOMMA=24,
    LBRACE=25,RBRACE=26,RSQUAREBRACE=27,TDOUBLEQUALS=28,TBEGIN=29,TROLLBACK=30,
    TCOMMIT=31,TLET=32,TSET=33,TGET=34,TESET=35,TEGET=36,
    TDELETE=37,TEDELETE=38,TEXTEND=39,TEEXTEND=40,TEXISTS=41,TEEXISTS=42,
    TIF=43,TELSE=44,TTHEN=45,TEND=46,TNX=47,TXX=48,
    TEX=49,TCMP=50,TCMPREV=51,TTHROW=52,TFOUND=53,TFOR=54,
    TDO=55,TIN=56,TRETURN=57,TSLEEP=58,TDIGIT=59,TFLOAT=60,
    TSTRING=61,TIDENTIFIER=62,TESCIDENTIFIER=63,TPLACEHOLDER=64,TTRUE=65,TFALSE=66,
    TNULL=67,TAT=68,TSCAN=69,TESCAN=70,TPREFIX=71,TBUCKET=72,
    TBY=73};

internal partial struct ValueType
{ 
        public NodeAst n;
        public string s;
        public int l;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal partial class scriptParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[136];
  private static State[] states = new State[237];
  private static string[] nonTerms = new string[] {
      "stmt_list", "$accept", "stmt", "set_stmt", "eset_stmt", "get_stmt", "eget_stmt", 
      "exists_stmt", "eexists_stmt", "delete_stmt", "edelete_stmt", "extend_stmt", 
      "eextend_stmt", "get_by_bucket_stmt", "eget_by_bucket_stmt", "scan_by_prefix_stmt", 
      "escan_by_prefix_stmt", "let_stmt", "for_stmt", "if_stmt", "begin_stmt", 
      "commit_stmt", "rollback_stmt", "return_stmt", "sleep_stmt", "throw_stmt", 
      "key_name", "expression", "set_cmp", "int", "set_not_exists", "identifier", 
      "placeholder", "string", "begin_options", "begin_option", "simple_expr", 
      "fcall_expr", "float", "boolean", "null", "fcall_argument_list", "fcall_argument_item", 
      };

  static scriptParser() {
    states[0] = new State(new int[]{33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-1,1,-3,223,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[1] = new State(new int[]{3,2,33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-3,3,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-4);
    states[5] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,6,-32,83,-33,84,-34,85});
    states[6] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,7,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[7] = new State(new int[]{49,12,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46,50,79,51,81,47,15,48,16,3,-27,33,-27,35,-27,34,-27,32,-27,36,-27,41,-27,42,-27,37,-27,38,-27,39,-27,40,-27,69,-27,70,-27,54,-27,43,-27,29,-27,31,-27,30,-27,57,-27,58,-27,52,-27,46,-27,44,-27},new int[]{-29,8,-31,17});
    states[8] = new State(new int[]{49,9,3,-28,33,-28,35,-28,34,-28,32,-28,36,-28,41,-28,42,-28,37,-28,38,-28,39,-28,40,-28,69,-28,70,-28,54,-28,43,-28,29,-28,31,-28,30,-28,57,-28,58,-28,52,-28,46,-28,44,-28});
    states[9] = new State(new int[]{59,11},new int[]{-30,10});
    states[10] = new State(-30);
    states[11] = new State(-130);
    states[12] = new State(new int[]{59,11},new int[]{-30,13});
    states[13] = new State(new int[]{47,15,48,16,3,-29,33,-29,35,-29,34,-29,32,-29,36,-29,41,-29,42,-29,37,-29,38,-29,39,-29,40,-29,69,-29,70,-29,54,-29,43,-29,29,-29,31,-29,30,-29,57,-29,58,-29,52,-29,46,-29,44,-29},new int[]{-31,14});
    states[14] = new State(-31);
    states[15] = new State(-33);
    states[16] = new State(-34);
    states[17] = new State(-32);
    states[18] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,19,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[19] = new State(new int[]{9,-89,11,-89,10,-89,12,24,13,26,14,28,15,30,6,-89,5,-89,16,36,17,38,18,40,19,42,4,-89,21,46,49,-89,50,-89,51,-89,47,-89,48,-89,3,-89,33,-89,35,-89,34,-89,32,-89,36,-89,41,-89,42,-89,37,-89,38,-89,39,-89,40,-89,69,-89,70,-89,54,-89,43,-89,29,-89,31,-89,30,-89,57,-89,58,-89,52,-89,46,-89,44,-89,27,-89,23,-89,24,-89,55,-89,45,-89});
    states[20] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,21,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[21] = new State(new int[]{9,-90,11,-90,10,-90,12,24,13,26,14,28,15,30,6,-90,5,-90,16,36,17,38,18,40,19,42,4,-90,21,46,49,-90,50,-90,51,-90,47,-90,48,-90,3,-90,33,-90,35,-90,34,-90,32,-90,36,-90,41,-90,42,-90,37,-90,38,-90,39,-90,40,-90,69,-90,70,-90,54,-90,43,-90,29,-90,31,-90,30,-90,57,-90,58,-90,52,-90,46,-90,44,-90,27,-90,23,-90,24,-90,55,-90,45,-90});
    states[22] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,23,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[23] = new State(new int[]{9,-91,11,-91,10,-91,12,24,13,26,14,28,15,30,6,-91,5,-91,16,36,17,38,18,40,19,42,4,-91,21,46,49,-91,50,-91,51,-91,47,-91,48,-91,3,-91,33,-91,35,-91,34,-91,32,-91,36,-91,41,-91,42,-91,37,-91,38,-91,39,-91,40,-91,69,-91,70,-91,54,-91,43,-91,29,-91,31,-91,30,-91,57,-91,58,-91,52,-91,46,-91,44,-91,27,-91,23,-91,24,-91,55,-91,45,-91});
    states[24] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,25,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[25] = new State(new int[]{9,-92,11,-92,10,-92,12,-92,13,-92,14,-92,15,-92,6,-92,5,-92,16,36,17,38,18,40,19,42,4,-92,21,46,49,-92,50,-92,51,-92,47,-92,48,-92,3,-92,33,-92,35,-92,34,-92,32,-92,36,-92,41,-92,42,-92,37,-92,38,-92,39,-92,40,-92,69,-92,70,-92,54,-92,43,-92,29,-92,31,-92,30,-92,57,-92,58,-92,52,-92,46,-92,44,-92,27,-92,23,-92,24,-92,55,-92,45,-92});
    states[26] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,27,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[27] = new State(new int[]{9,-93,11,-93,10,-93,12,-93,13,-93,14,-93,15,-93,6,-93,5,-93,16,36,17,38,18,40,19,42,4,-93,21,46,49,-93,50,-93,51,-93,47,-93,48,-93,3,-93,33,-93,35,-93,34,-93,32,-93,36,-93,41,-93,42,-93,37,-93,38,-93,39,-93,40,-93,69,-93,70,-93,54,-93,43,-93,29,-93,31,-93,30,-93,57,-93,58,-93,52,-93,46,-93,44,-93,27,-93,23,-93,24,-93,55,-93,45,-93});
    states[28] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,29,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[29] = new State(new int[]{9,-94,11,-94,10,-94,12,-94,13,-94,14,-94,15,-94,6,-94,5,-94,16,36,17,38,18,40,19,42,4,-94,21,46,49,-94,50,-94,51,-94,47,-94,48,-94,3,-94,33,-94,35,-94,34,-94,32,-94,36,-94,41,-94,42,-94,37,-94,38,-94,39,-94,40,-94,69,-94,70,-94,54,-94,43,-94,29,-94,31,-94,30,-94,57,-94,58,-94,52,-94,46,-94,44,-94,27,-94,23,-94,24,-94,55,-94,45,-94});
    states[30] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,31,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[31] = new State(new int[]{9,-95,11,-95,10,-95,12,-95,13,-95,14,-95,15,-95,6,-95,5,-95,16,36,17,38,18,40,19,42,4,-95,21,46,49,-95,50,-95,51,-95,47,-95,48,-95,3,-95,33,-95,35,-95,34,-95,32,-95,36,-95,41,-95,42,-95,37,-95,38,-95,39,-95,40,-95,69,-95,70,-95,54,-95,43,-95,29,-95,31,-95,30,-95,57,-95,58,-95,52,-95,46,-95,44,-95,27,-95,23,-95,24,-95,55,-95,45,-95});
    states[32] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,33,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[33] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,-96,5,-96,16,36,17,38,18,40,19,42,4,-96,21,46,49,-96,50,-96,51,-96,47,-96,48,-96,3,-96,33,-96,35,-96,34,-96,32,-96,36,-96,41,-96,42,-96,37,-96,38,-96,39,-96,40,-96,69,-96,70,-96,54,-96,43,-96,29,-96,31,-96,30,-96,57,-96,58,-96,52,-96,46,-96,44,-96,27,-96,23,-96,24,-96,55,-96,45,-96});
    states[34] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,35,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[35] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,-97,16,36,17,38,18,40,19,42,4,-97,21,46,49,-97,50,-97,51,-97,47,-97,48,-97,3,-97,33,-97,35,-97,34,-97,32,-97,36,-97,41,-97,42,-97,37,-97,38,-97,39,-97,40,-97,69,-97,70,-97,54,-97,43,-97,29,-97,31,-97,30,-97,57,-97,58,-97,52,-97,46,-97,44,-97,27,-97,23,-97,24,-97,55,-97,45,-97});
    states[36] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,37,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[37] = new State(new int[]{9,-98,11,-98,10,-98,12,-98,13,-98,14,-98,15,-98,6,-98,5,-98,16,-98,17,-98,18,40,19,42,4,-98,21,46,49,-98,50,-98,51,-98,47,-98,48,-98,3,-98,33,-98,35,-98,34,-98,32,-98,36,-98,41,-98,42,-98,37,-98,38,-98,39,-98,40,-98,69,-98,70,-98,54,-98,43,-98,29,-98,31,-98,30,-98,57,-98,58,-98,52,-98,46,-98,44,-98,27,-98,23,-98,24,-98,55,-98,45,-98});
    states[38] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,39,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[39] = new State(new int[]{9,-99,11,-99,10,-99,12,-99,13,-99,14,-99,15,-99,6,-99,5,-99,16,-99,17,-99,18,40,19,42,4,-99,21,46,49,-99,50,-99,51,-99,47,-99,48,-99,3,-99,33,-99,35,-99,34,-99,32,-99,36,-99,41,-99,42,-99,37,-99,38,-99,39,-99,40,-99,69,-99,70,-99,54,-99,43,-99,29,-99,31,-99,30,-99,57,-99,58,-99,52,-99,46,-99,44,-99,27,-99,23,-99,24,-99,55,-99,45,-99});
    states[40] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,41,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[41] = new State(new int[]{9,-100,11,-100,10,-100,12,-100,13,-100,14,-100,15,-100,6,-100,5,-100,16,-100,17,-100,18,-100,19,-100,4,-100,21,46,49,-100,50,-100,51,-100,47,-100,48,-100,3,-100,33,-100,35,-100,34,-100,32,-100,36,-100,41,-100,42,-100,37,-100,38,-100,39,-100,40,-100,69,-100,70,-100,54,-100,43,-100,29,-100,31,-100,30,-100,57,-100,58,-100,52,-100,46,-100,44,-100,27,-100,23,-100,24,-100,55,-100,45,-100});
    states[42] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,43,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[43] = new State(new int[]{9,-101,11,-101,10,-101,12,-101,13,-101,14,-101,15,-101,6,-101,5,-101,16,-101,17,-101,18,-101,19,-101,4,-101,21,46,49,-101,50,-101,51,-101,47,-101,48,-101,3,-101,33,-101,35,-101,34,-101,32,-101,36,-101,41,-101,42,-101,37,-101,38,-101,39,-101,40,-101,69,-101,70,-101,54,-101,43,-101,29,-101,31,-101,30,-101,57,-101,58,-101,52,-101,46,-101,44,-101,27,-101,23,-101,24,-101,55,-101,45,-101});
    states[44] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,45,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[45] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,-102,21,46,49,-102,50,-102,51,-102,47,-102,48,-102,3,-102,33,-102,35,-102,34,-102,32,-102,36,-102,41,-102,42,-102,37,-102,38,-102,39,-102,40,-102,69,-102,70,-102,54,-102,43,-102,29,-102,31,-102,30,-102,57,-102,58,-102,52,-102,46,-102,44,-102,27,-102,23,-102,24,-102,55,-102,45,-102});
    states[46] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,47,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[47] = new State(new int[]{27,48,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46});
    states[48] = new State(-106);
    states[49] = new State(new int[]{33,51,53,52,20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,50,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[50] = new State(new int[]{9,-103,11,-103,10,-103,12,-103,13,-103,14,-103,15,-103,6,-103,5,-103,16,-103,17,-103,18,-103,19,-103,4,-103,21,46,49,-103,50,-103,51,-103,47,-103,48,-103,3,-103,33,-103,35,-103,34,-103,32,-103,36,-103,41,-103,42,-103,37,-103,38,-103,39,-103,40,-103,69,-103,70,-103,54,-103,43,-103,29,-103,31,-103,30,-103,57,-103,58,-103,52,-103,46,-103,44,-103,27,-103,23,-103,24,-103,55,-103,45,-103});
    states[51] = new State(-104);
    states[52] = new State(-105);
    states[53] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,54,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[54] = new State(new int[]{23,55,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46});
    states[55] = new State(-107);
    states[56] = new State(-108);
    states[57] = new State(new int[]{22,58,49,-109,9,-109,11,-109,10,-109,12,-109,13,-109,14,-109,15,-109,6,-109,5,-109,16,-109,17,-109,18,-109,19,-109,4,-109,21,-109,50,-109,51,-109,47,-109,48,-109,3,-109,33,-109,35,-109,34,-109,32,-109,36,-109,41,-109,42,-109,37,-109,38,-109,39,-109,40,-109,69,-109,70,-109,54,-109,43,-109,29,-109,31,-109,30,-109,57,-109,58,-109,52,-109,46,-109,44,-109,27,-109,23,-109,24,-109,55,-109,45,-109});
    states[58] = new State(new int[]{23,59,20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-42,60,-43,78,-28,64,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[59] = new State(-116);
    states[60] = new State(new int[]{23,61,24,62});
    states[61] = new State(-117);
    states[62] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-43,63,-28,64,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[63] = new State(-118);
    states[64] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46,23,-120,24,-120});
    states[65] = new State(-128);
    states[66] = new State(-110);
    states[67] = new State(-129);
    states[68] = new State(-111);
    states[69] = new State(-112);
    states[70] = new State(-131);
    states[71] = new State(-113);
    states[72] = new State(-134);
    states[73] = new State(-114);
    states[74] = new State(-132);
    states[75] = new State(-133);
    states[76] = new State(-115);
    states[77] = new State(-135);
    states[78] = new State(-119);
    states[79] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,80,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[80] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46,49,-35,3,-35,33,-35,35,-35,34,-35,32,-35,36,-35,41,-35,42,-35,37,-35,38,-35,39,-35,40,-35,69,-35,70,-35,54,-35,43,-35,29,-35,31,-35,30,-35,57,-35,58,-35,52,-35,46,-35,44,-35});
    states[81] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,82,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[82] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46,49,-36,3,-36,33,-36,35,-36,34,-36,32,-36,36,-36,41,-36,42,-36,37,-36,38,-36,39,-36,40,-36,69,-36,70,-36,54,-36,43,-36,29,-36,31,-36,30,-36,57,-36,58,-36,52,-36,46,-36,44,-36});
    states[83] = new State(-71);
    states[84] = new State(-72);
    states[85] = new State(-73);
    states[86] = new State(-5);
    states[87] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,88,-32,83,-33,84,-34,85});
    states[88] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,89,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[89] = new State(new int[]{49,93,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46,50,79,51,81,47,15,48,16,3,-37,33,-37,35,-37,34,-37,32,-37,36,-37,41,-37,42,-37,37,-37,38,-37,39,-37,40,-37,69,-37,70,-37,54,-37,43,-37,29,-37,31,-37,30,-37,57,-37,58,-37,52,-37,46,-37,44,-37},new int[]{-29,90,-31,96});
    states[90] = new State(new int[]{49,91,3,-38,33,-38,35,-38,34,-38,32,-38,36,-38,41,-38,42,-38,37,-38,38,-38,39,-38,40,-38,69,-38,70,-38,54,-38,43,-38,29,-38,31,-38,30,-38,57,-38,58,-38,52,-38,46,-38,44,-38});
    states[91] = new State(new int[]{59,11},new int[]{-30,92});
    states[92] = new State(-40);
    states[93] = new State(new int[]{59,11},new int[]{-30,94});
    states[94] = new State(new int[]{47,15,48,16,3,-39,33,-39,35,-39,34,-39,32,-39,36,-39,41,-39,42,-39,37,-39,38,-39,39,-39,40,-39,69,-39,70,-39,54,-39,43,-39,29,-39,31,-39,30,-39,57,-39,58,-39,52,-39,46,-39,44,-39},new int[]{-31,95});
    states[95] = new State(-41);
    states[96] = new State(-42);
    states[97] = new State(-6);
    states[98] = new State(new int[]{73,102,62,65,64,67,61,72},new int[]{-27,99,-32,83,-33,84,-34,85});
    states[99] = new State(new int[]{68,100,3,-43,33,-43,35,-43,34,-43,32,-43,36,-43,41,-43,42,-43,37,-43,38,-43,39,-43,40,-43,69,-43,70,-43,54,-43,43,-43,29,-43,31,-43,30,-43,57,-43,58,-43,52,-43,46,-43,44,-43});
    states[100] = new State(new int[]{59,11},new int[]{-30,101});
    states[101] = new State(-45);
    states[102] = new State(new int[]{72,103});
    states[103] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,104,-32,83,-33,84,-34,85});
    states[104] = new State(-63);
    states[105] = new State(new int[]{62,65},new int[]{-32,106});
    states[106] = new State(new int[]{9,107});
    states[107] = new State(new int[]{34,108,36,115,41,122,42,126,69,130,70,134,20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,138,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[108] = new State(new int[]{73,112,62,65,64,67,61,72},new int[]{-27,109,-32,83,-33,84,-34,85});
    states[109] = new State(new int[]{68,110,3,-44,33,-44,35,-44,34,-44,32,-44,36,-44,41,-44,42,-44,37,-44,38,-44,39,-44,40,-44,69,-44,70,-44,54,-44,43,-44,29,-44,31,-44,30,-44,57,-44,58,-44,52,-44,46,-44,44,-44});
    states[110] = new State(new int[]{59,11},new int[]{-30,111});
    states[111] = new State(-46);
    states[112] = new State(new int[]{72,113});
    states[113] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,114,-32,83,-33,84,-34,85});
    states[114] = new State(-64);
    states[115] = new State(new int[]{73,119,62,65,64,67,61,72},new int[]{-27,116,-32,83,-33,84,-34,85});
    states[116] = new State(new int[]{68,117,3,-48,33,-48,35,-48,34,-48,32,-48,36,-48,41,-48,42,-48,37,-48,38,-48,39,-48,40,-48,69,-48,70,-48,54,-48,43,-48,29,-48,31,-48,30,-48,57,-48,58,-48,52,-48,46,-48,44,-48});
    states[117] = new State(new int[]{59,11},new int[]{-30,118});
    states[118] = new State(-50);
    states[119] = new State(new int[]{72,120});
    states[120] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,121,-32,83,-33,84,-34,85});
    states[121] = new State(-66);
    states[122] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,123,-32,83,-33,84,-34,85});
    states[123] = new State(new int[]{68,124,3,-52,33,-52,35,-52,34,-52,32,-52,36,-52,41,-52,42,-52,37,-52,38,-52,39,-52,40,-52,69,-52,70,-52,54,-52,43,-52,29,-52,31,-52,30,-52,57,-52,58,-52,52,-52,46,-52,44,-52});
    states[124] = new State(new int[]{59,11},new int[]{-30,125});
    states[125] = new State(-54);
    states[126] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,127,-32,83,-33,84,-34,85});
    states[127] = new State(new int[]{68,128,3,-56,33,-56,35,-56,34,-56,32,-56,36,-56,41,-56,42,-56,37,-56,38,-56,39,-56,40,-56,69,-56,70,-56,54,-56,43,-56,29,-56,31,-56,30,-56,57,-56,58,-56,52,-56,46,-56,44,-56});
    states[128] = new State(new int[]{59,11},new int[]{-30,129});
    states[129] = new State(-58);
    states[130] = new State(new int[]{73,131});
    states[131] = new State(new int[]{71,132});
    states[132] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,133,-32,83,-33,84,-34,85});
    states[133] = new State(-68);
    states[134] = new State(new int[]{73,135});
    states[135] = new State(new int[]{71,136});
    states[136] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,137,-32,83,-33,84,-34,85});
    states[137] = new State(-70);
    states[138] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46,3,-74,33,-74,35,-74,34,-74,32,-74,36,-74,41,-74,42,-74,37,-74,38,-74,39,-74,40,-74,69,-74,70,-74,54,-74,43,-74,29,-74,31,-74,30,-74,57,-74,58,-74,52,-74,46,-74,44,-74});
    states[139] = new State(-7);
    states[140] = new State(new int[]{73,144,62,65,64,67,61,72},new int[]{-27,141,-32,83,-33,84,-34,85});
    states[141] = new State(new int[]{68,142,3,-47,33,-47,35,-47,34,-47,32,-47,36,-47,41,-47,42,-47,37,-47,38,-47,39,-47,40,-47,69,-47,70,-47,54,-47,43,-47,29,-47,31,-47,30,-47,57,-47,58,-47,52,-47,46,-47,44,-47});
    states[142] = new State(new int[]{59,11},new int[]{-30,143});
    states[143] = new State(-49);
    states[144] = new State(new int[]{72,145});
    states[145] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,146,-32,83,-33,84,-34,85});
    states[146] = new State(-65);
    states[147] = new State(-8);
    states[148] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,149,-32,83,-33,84,-34,85});
    states[149] = new State(new int[]{68,150,3,-51,33,-51,35,-51,34,-51,32,-51,36,-51,41,-51,42,-51,37,-51,38,-51,39,-51,40,-51,69,-51,70,-51,54,-51,43,-51,29,-51,31,-51,30,-51,57,-51,58,-51,52,-51,46,-51,44,-51});
    states[150] = new State(new int[]{59,11},new int[]{-30,151});
    states[151] = new State(-53);
    states[152] = new State(-9);
    states[153] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,154,-32,83,-33,84,-34,85});
    states[154] = new State(new int[]{68,155,3,-55,33,-55,35,-55,34,-55,32,-55,36,-55,41,-55,42,-55,37,-55,38,-55,39,-55,40,-55,69,-55,70,-55,54,-55,43,-55,29,-55,31,-55,30,-55,57,-55,58,-55,52,-55,46,-55,44,-55});
    states[155] = new State(new int[]{59,11},new int[]{-30,156});
    states[156] = new State(-57);
    states[157] = new State(-10);
    states[158] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,159,-32,83,-33,84,-34,85});
    states[159] = new State(-59);
    states[160] = new State(-11);
    states[161] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,162,-32,83,-33,84,-34,85});
    states[162] = new State(-60);
    states[163] = new State(-12);
    states[164] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,165,-32,83,-33,84,-34,85});
    states[165] = new State(new int[]{59,11},new int[]{-30,166});
    states[166] = new State(-61);
    states[167] = new State(-13);
    states[168] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,169,-32,83,-33,84,-34,85});
    states[169] = new State(new int[]{59,11},new int[]{-30,170});
    states[170] = new State(-62);
    states[171] = new State(-14);
    states[172] = new State(-15);
    states[173] = new State(-16);
    states[174] = new State(new int[]{73,175});
    states[175] = new State(new int[]{71,176});
    states[176] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,177,-32,83,-33,84,-34,85});
    states[177] = new State(-67);
    states[178] = new State(-17);
    states[179] = new State(new int[]{73,180});
    states[180] = new State(new int[]{71,181});
    states[181] = new State(new int[]{62,65,64,67,61,72},new int[]{-27,182,-32,83,-33,84,-34,85});
    states[182] = new State(-69);
    states[183] = new State(-18);
    states[184] = new State(-19);
    states[185] = new State(new int[]{62,65},new int[]{-32,186});
    states[186] = new State(new int[]{56,187});
    states[187] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,188,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[188] = new State(new int[]{55,189,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46});
    states[189] = new State(new int[]{33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-1,190,-3,223,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[190] = new State(new int[]{46,191,33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-3,3,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[191] = new State(-77);
    states[192] = new State(-20);
    states[193] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,194,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[194] = new State(new int[]{45,195,9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46});
    states[195] = new State(new int[]{33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-1,196,-3,223,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[196] = new State(new int[]{46,197,44,198,33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-3,3,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[197] = new State(-75);
    states[198] = new State(new int[]{33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-1,199,-3,223,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[199] = new State(new int[]{46,200,33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-3,3,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[200] = new State(-76);
    states[201] = new State(-21);
    states[202] = new State(new int[]{22,218,33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-1,203,-3,223,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[203] = new State(new int[]{46,204,33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-3,3,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[204] = new State(-78);
    states[205] = new State(-22);
    states[206] = new State(-83);
    states[207] = new State(-23);
    states[208] = new State(-84);
    states[209] = new State(-24);
    states[210] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77,3,-86,33,-86,35,-86,34,-86,32,-86,36,-86,41,-86,42,-86,37,-86,38,-86,39,-86,40,-86,69,-86,70,-86,54,-86,43,-86,29,-86,31,-86,30,-86,57,-86,58,-86,52,-86,46,-86,44,-86},new int[]{-28,211,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[211] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46,3,-85,33,-85,35,-85,34,-85,32,-85,36,-85,41,-85,42,-85,37,-85,38,-85,39,-85,40,-85,69,-85,70,-85,54,-85,43,-85,29,-85,31,-85,30,-85,57,-85,58,-85,52,-85,46,-85,44,-85});
    states[212] = new State(-25);
    states[213] = new State(new int[]{59,11},new int[]{-30,214});
    states[214] = new State(-87);
    states[215] = new State(-26);
    states[216] = new State(new int[]{20,49,22,53,62,65,64,67,59,11,60,70,61,72,65,74,66,75,67,77},new int[]{-28,217,-38,56,-32,57,-33,66,-30,68,-39,69,-34,71,-40,73,-41,76});
    states[217] = new State(new int[]{9,18,11,20,10,22,12,24,13,26,14,28,15,30,6,32,5,34,16,36,17,38,18,40,19,42,4,44,21,46,3,-88,33,-88,35,-88,34,-88,32,-88,36,-88,41,-88,42,-88,37,-88,38,-88,39,-88,40,-88,69,-88,70,-88,54,-88,43,-88,29,-88,31,-88,30,-88,57,-88,58,-88,52,-88,46,-88,44,-88});
    states[218] = new State(new int[]{62,65},new int[]{-35,219,-36,236,-32,226});
    states[219] = new State(new int[]{23,220,24,224});
    states[220] = new State(new int[]{33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-1,221,-3,223,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[221] = new State(new int[]{46,222,33,5,35,87,34,98,32,105,36,140,41,148,42,153,37,158,38,161,39,164,40,168,69,174,70,179,54,185,43,193,29,202,31,206,30,208,57,210,58,213,52,216},new int[]{-3,3,-4,4,-5,86,-6,97,-7,139,-8,147,-9,152,-10,157,-11,160,-12,163,-13,167,-14,171,-15,172,-16,173,-17,178,-18,183,-19,184,-20,192,-21,201,-22,205,-23,207,-24,209,-25,212,-26,215});
    states[222] = new State(-79);
    states[223] = new State(-3);
    states[224] = new State(new int[]{62,65},new int[]{-36,225,-32,226});
    states[225] = new State(-80);
    states[226] = new State(new int[]{9,227});
    states[227] = new State(new int[]{62,65,59,11,60,70,61,72,65,74,66,75,67,77,64,67},new int[]{-37,228,-32,229,-30,230,-39,231,-34,232,-40,233,-41,234,-33,235});
    states[228] = new State(-82);
    states[229] = new State(-121);
    states[230] = new State(-122);
    states[231] = new State(-123);
    states[232] = new State(-124);
    states[233] = new State(-125);
    states[234] = new State(-126);
    states[235] = new State(-127);
    states[236] = new State(-81);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-6});
    rules[7] = new Rule(-3, new int[]{-7});
    rules[8] = new Rule(-3, new int[]{-8});
    rules[9] = new Rule(-3, new int[]{-9});
    rules[10] = new Rule(-3, new int[]{-10});
    rules[11] = new Rule(-3, new int[]{-11});
    rules[12] = new Rule(-3, new int[]{-12});
    rules[13] = new Rule(-3, new int[]{-13});
    rules[14] = new Rule(-3, new int[]{-14});
    rules[15] = new Rule(-3, new int[]{-15});
    rules[16] = new Rule(-3, new int[]{-16});
    rules[17] = new Rule(-3, new int[]{-17});
    rules[18] = new Rule(-3, new int[]{-18});
    rules[19] = new Rule(-3, new int[]{-19});
    rules[20] = new Rule(-3, new int[]{-20});
    rules[21] = new Rule(-3, new int[]{-21});
    rules[22] = new Rule(-3, new int[]{-22});
    rules[23] = new Rule(-3, new int[]{-23});
    rules[24] = new Rule(-3, new int[]{-24});
    rules[25] = new Rule(-3, new int[]{-25});
    rules[26] = new Rule(-3, new int[]{-26});
    rules[27] = new Rule(-4, new int[]{33,-27,-28});
    rules[28] = new Rule(-4, new int[]{33,-27,-28,-29});
    rules[29] = new Rule(-4, new int[]{33,-27,-28,49,-30});
    rules[30] = new Rule(-4, new int[]{33,-27,-28,-29,49,-30});
    rules[31] = new Rule(-4, new int[]{33,-27,-28,49,-30,-31});
    rules[32] = new Rule(-4, new int[]{33,-27,-28,-31});
    rules[33] = new Rule(-31, new int[]{47});
    rules[34] = new Rule(-31, new int[]{48});
    rules[35] = new Rule(-29, new int[]{50,-28});
    rules[36] = new Rule(-29, new int[]{51,-28});
    rules[37] = new Rule(-5, new int[]{35,-27,-28});
    rules[38] = new Rule(-5, new int[]{35,-27,-28,-29});
    rules[39] = new Rule(-5, new int[]{35,-27,-28,49,-30});
    rules[40] = new Rule(-5, new int[]{35,-27,-28,-29,49,-30});
    rules[41] = new Rule(-5, new int[]{35,-27,-28,49,-30,-31});
    rules[42] = new Rule(-5, new int[]{35,-27,-28,-31});
    rules[43] = new Rule(-6, new int[]{34,-27});
    rules[44] = new Rule(-6, new int[]{32,-32,9,34,-27});
    rules[45] = new Rule(-6, new int[]{34,-27,68,-30});
    rules[46] = new Rule(-6, new int[]{32,-32,9,34,-27,68,-30});
    rules[47] = new Rule(-7, new int[]{36,-27});
    rules[48] = new Rule(-7, new int[]{32,-32,9,36,-27});
    rules[49] = new Rule(-7, new int[]{36,-27,68,-30});
    rules[50] = new Rule(-7, new int[]{32,-32,9,36,-27,68,-30});
    rules[51] = new Rule(-8, new int[]{41,-27});
    rules[52] = new Rule(-8, new int[]{32,-32,9,41,-27});
    rules[53] = new Rule(-8, new int[]{41,-27,68,-30});
    rules[54] = new Rule(-8, new int[]{32,-32,9,41,-27,68,-30});
    rules[55] = new Rule(-9, new int[]{42,-27});
    rules[56] = new Rule(-9, new int[]{32,-32,9,42,-27});
    rules[57] = new Rule(-9, new int[]{42,-27,68,-30});
    rules[58] = new Rule(-9, new int[]{32,-32,9,42,-27,68,-30});
    rules[59] = new Rule(-10, new int[]{37,-27});
    rules[60] = new Rule(-11, new int[]{38,-27});
    rules[61] = new Rule(-12, new int[]{39,-27,-30});
    rules[62] = new Rule(-13, new int[]{40,-27,-30});
    rules[63] = new Rule(-14, new int[]{34,73,72,-27});
    rules[64] = new Rule(-14, new int[]{32,-32,9,34,73,72,-27});
    rules[65] = new Rule(-15, new int[]{36,73,72,-27});
    rules[66] = new Rule(-15, new int[]{32,-32,9,36,73,72,-27});
    rules[67] = new Rule(-16, new int[]{69,73,71,-27});
    rules[68] = new Rule(-16, new int[]{32,-32,9,69,73,71,-27});
    rules[69] = new Rule(-17, new int[]{70,73,71,-27});
    rules[70] = new Rule(-17, new int[]{32,-32,9,70,73,71,-27});
    rules[71] = new Rule(-27, new int[]{-32});
    rules[72] = new Rule(-27, new int[]{-33});
    rules[73] = new Rule(-27, new int[]{-34});
    rules[74] = new Rule(-18, new int[]{32,-32,9,-28});
    rules[75] = new Rule(-20, new int[]{43,-28,45,-1,46});
    rules[76] = new Rule(-20, new int[]{43,-28,45,-1,44,-1,46});
    rules[77] = new Rule(-19, new int[]{54,-32,56,-28,55,-1,46});
    rules[78] = new Rule(-21, new int[]{29,-1,46});
    rules[79] = new Rule(-21, new int[]{29,22,-35,23,-1,46});
    rules[80] = new Rule(-35, new int[]{-35,24,-36});
    rules[81] = new Rule(-35, new int[]{-36});
    rules[82] = new Rule(-36, new int[]{-32,9,-37});
    rules[83] = new Rule(-22, new int[]{31});
    rules[84] = new Rule(-23, new int[]{30});
    rules[85] = new Rule(-24, new int[]{57,-28});
    rules[86] = new Rule(-24, new int[]{57});
    rules[87] = new Rule(-25, new int[]{58,-30});
    rules[88] = new Rule(-26, new int[]{52,-28});
    rules[89] = new Rule(-28, new int[]{-28,9,-28});
    rules[90] = new Rule(-28, new int[]{-28,11,-28});
    rules[91] = new Rule(-28, new int[]{-28,10,-28});
    rules[92] = new Rule(-28, new int[]{-28,12,-28});
    rules[93] = new Rule(-28, new int[]{-28,13,-28});
    rules[94] = new Rule(-28, new int[]{-28,14,-28});
    rules[95] = new Rule(-28, new int[]{-28,15,-28});
    rules[96] = new Rule(-28, new int[]{-28,6,-28});
    rules[97] = new Rule(-28, new int[]{-28,5,-28});
    rules[98] = new Rule(-28, new int[]{-28,16,-28});
    rules[99] = new Rule(-28, new int[]{-28,17,-28});
    rules[100] = new Rule(-28, new int[]{-28,18,-28});
    rules[101] = new Rule(-28, new int[]{-28,19,-28});
    rules[102] = new Rule(-28, new int[]{-28,4,-28});
    rules[103] = new Rule(-28, new int[]{20,-28});
    rules[104] = new Rule(-28, new int[]{20,33});
    rules[105] = new Rule(-28, new int[]{20,53});
    rules[106] = new Rule(-28, new int[]{-28,21,-28,27});
    rules[107] = new Rule(-28, new int[]{22,-28,23});
    rules[108] = new Rule(-28, new int[]{-38});
    rules[109] = new Rule(-28, new int[]{-32});
    rules[110] = new Rule(-28, new int[]{-33});
    rules[111] = new Rule(-28, new int[]{-30});
    rules[112] = new Rule(-28, new int[]{-39});
    rules[113] = new Rule(-28, new int[]{-34});
    rules[114] = new Rule(-28, new int[]{-40});
    rules[115] = new Rule(-28, new int[]{-41});
    rules[116] = new Rule(-38, new int[]{-32,22,23});
    rules[117] = new Rule(-38, new int[]{-32,22,-42,23});
    rules[118] = new Rule(-42, new int[]{-42,24,-43});
    rules[119] = new Rule(-42, new int[]{-43});
    rules[120] = new Rule(-43, new int[]{-28});
    rules[121] = new Rule(-37, new int[]{-32});
    rules[122] = new Rule(-37, new int[]{-30});
    rules[123] = new Rule(-37, new int[]{-39});
    rules[124] = new Rule(-37, new int[]{-34});
    rules[125] = new Rule(-37, new int[]{-40});
    rules[126] = new Rule(-37, new int[]{-41});
    rules[127] = new Rule(-37, new int[]{-33});
    rules[128] = new Rule(-32, new int[]{62});
    rules[129] = new Rule(-33, new int[]{64});
    rules[130] = new Rule(-30, new int[]{59});
    rules[131] = new Rule(-39, new int[]{60});
    rules[132] = new Rule(-40, new int[]{65});
    rules[133] = new Rule(-40, new int[]{66});
    rules[134] = new Rule(-34, new int[]{61});
    rules[135] = new Rule(-41, new int[]{67});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // stmt_list -> stmt_list, stmt
{ CurrentSemanticValue.n = new(NodeType.StmtList, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 3: // stmt_list -> stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 4: // stmt -> set_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 5: // stmt -> eset_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 6: // stmt -> get_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 7: // stmt -> eget_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 8: // stmt -> exists_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 9: // stmt -> eexists_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 10: // stmt -> delete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 11: // stmt -> edelete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 12: // stmt -> extend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 13: // stmt -> eextend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 14: // stmt -> get_by_bucket_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 15: // stmt -> eget_by_bucket_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 16: // stmt -> scan_by_prefix_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 17: // stmt -> escan_by_prefix_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 18: // stmt -> let_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 19: // stmt -> for_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 20: // stmt -> if_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 21: // stmt -> begin_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 22: // stmt -> commit_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 23: // stmt -> rollback_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 24: // stmt -> return_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 25: // stmt -> sleep_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 26: // stmt -> throw_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 27: // set_stmt -> TSET, key_name, expression
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 28: // set_stmt -> TSET, key_name, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 29: // set_stmt -> TSET, key_name, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 30: // set_stmt -> TSET, key_name, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 31: // set_stmt -> TSET, key_name, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 32: // set_stmt -> TSET, key_name, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 33: // set_not_exists -> TNX
{ CurrentSemanticValue.n = new(NodeType.SetNotExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 34: // set_not_exists -> TXX
{ CurrentSemanticValue.n = new(NodeType.SetExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 35: // set_cmp -> TCMP, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmp, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 36: // set_cmp -> TCMPREV, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmpRev, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 37: // eset_stmt -> TESET, key_name, expression
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 38: // eset_stmt -> TESET, key_name, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 39: // eset_stmt -> TESET, key_name, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 40: // eset_stmt -> TESET, key_name, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 41: // eset_stmt -> TESET, key_name, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 42: // eset_stmt -> TESET, key_name, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 43: // get_stmt -> TGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 44: // get_stmt -> TLET, identifier, TEQUALS, TGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 45: // get_stmt -> TGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 46: // get_stmt -> TLET, identifier, TEQUALS, TGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 47: // eget_stmt -> TEGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 48: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, key_name
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 49: // eget_stmt -> TEGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 50: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 51: // exists_stmt -> TEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 52: // exists_stmt -> TLET, identifier, TEQUALS, TEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 53: // exists_stmt -> TEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 54: // exists_stmt -> TLET, identifier, TEQUALS, TEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Exists, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 55: // eexists_stmt -> TEEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 56: // eexists_stmt -> TLET, identifier, TEQUALS, TEEXISTS, key_name
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 57: // eexists_stmt -> TEEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 58: // eexists_stmt -> TLET, identifier, TEQUALS, TEEXISTS, key_name, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eexists, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 59: // delete_stmt -> TDELETE, key_name
{ CurrentSemanticValue.n = new(NodeType.Delete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 60: // edelete_stmt -> TEDELETE, key_name
{ CurrentSemanticValue.n = new(NodeType.Edelete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 61: // extend_stmt -> TEXTEND, key_name, int
{ CurrentSemanticValue.n = new(NodeType.Extend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 62: // eextend_stmt -> TEEXTEND, key_name, int
{ CurrentSemanticValue.n = new(NodeType.Eextend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 63: // get_by_bucket_stmt -> TGET, TBY, TBUCKET, key_name
{ CurrentSemanticValue.n = new(NodeType.GetByBucket, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 64: // get_by_bucket_stmt -> TLET, identifier, TEQUALS, TGET, TBY, TBUCKET, key_name
{ CurrentSemanticValue.n = new(NodeType.GetByBucket, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-6].n, null, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 65: // eget_by_bucket_stmt -> TEGET, TBY, TBUCKET, key_name
{ CurrentSemanticValue.n = new(NodeType.EGetByBucket, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 66: // eget_by_bucket_stmt -> TLET, identifier, TEQUALS, TEGET, TBY, TBUCKET, key_name
{ CurrentSemanticValue.n = new(NodeType.EGetByBucket, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-6].n, null, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 67: // scan_by_prefix_stmt -> TSCAN, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.ScanByPrefix, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 68: // scan_by_prefix_stmt -> TLET, identifier, TEQUALS, TSCAN, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.ScanByPrefix, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-6].n, null, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 69: // escan_by_prefix_stmt -> TESCAN, TBY, TPREFIX, key_name
{ CurrentSemanticValue.n = new(NodeType.EscanByPrefix, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 70: // escan_by_prefix_stmt -> TLET, identifier, TEQUALS, TESCAN, TBY, TPREFIX, 
               //                         key_name
{ CurrentSemanticValue.n = new(NodeType.EscanByPrefix, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-6].n, null, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 71: // key_name -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 72: // key_name -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 73: // key_name -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 74: // let_stmt -> TLET, identifier, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Let, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 75: // if_stmt -> TIF, expression, TTHEN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 76: // if_stmt -> TIF, expression, TTHEN, stmt_list, TELSE, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 77: // for_stmt -> TFOR, identifier, TIN, expression, TDO, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.For, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 78: // begin_stmt -> TBEGIN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 79: // begin_stmt -> TBEGIN, LPAREN, begin_options, RPAREN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 80: // begin_options -> begin_options, TCOMMA, begin_option
{ CurrentSemanticValue.n = new(NodeType.BeginOptionList, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 81: // begin_options -> begin_option
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 82: // begin_option -> identifier, TEQUALS, simple_expr
{ CurrentSemanticValue.n = new(NodeType.BeginOption, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 83: // commit_stmt -> TCOMMIT
{ CurrentSemanticValue.n = new(NodeType.Commit, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 84: // rollback_stmt -> TROLLBACK
{ CurrentSemanticValue.n = new(NodeType.Rollback, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 85: // return_stmt -> TRETURN, expression
{ CurrentSemanticValue.n = new(NodeType.Return, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 86: // return_stmt -> TRETURN
{ CurrentSemanticValue.n = new(NodeType.Return, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 87: // sleep_stmt -> TSLEEP, int
{ CurrentSemanticValue.n = new(NodeType.Sleep, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 88: // throw_stmt -> TTHROW, expression
{ CurrentSemanticValue.n = new(NodeType.Throw, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 89: // expression -> expression, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 90: // expression -> expression, TDOUBLEEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 91: // expression -> expression, TNOTEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.NotEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 92: // expression -> expression, TLESSTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.LessThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 93: // expression -> expression, TGREATERTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 94: // expression -> expression, TLESSTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.LessThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 95: // expression -> expression, TGREATERTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 96: // expression -> expression, TAND, expression
{ CurrentSemanticValue.n = new(NodeType.And, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 97: // expression -> expression, TOR, expression
{ CurrentSemanticValue.n = new(NodeType.Or, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 98: // expression -> expression, TADD, expression
{ CurrentSemanticValue.n = new(NodeType.Add, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 99: // expression -> expression, TMINUS, expression
{ CurrentSemanticValue.n = new(NodeType.Subtract, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 100: // expression -> expression, TMULT, expression
{ CurrentSemanticValue.n = new(NodeType.Mult, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 101: // expression -> expression, TDIV, expression
{ CurrentSemanticValue.n = new(NodeType.Div, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 102: // expression -> expression, TDOUBLEDOT, expression
{ CurrentSemanticValue.n = new(NodeType.Range, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 103: // expression -> TNOT, expression
{ CurrentSemanticValue.n = new(NodeType.Not, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 104: // expression -> TNOT, TSET
{ CurrentSemanticValue.n = new(NodeType.NotSet, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 105: // expression -> TNOT, TFOUND
{ CurrentSemanticValue.n = new(NodeType.NotFound, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 106: // expression -> expression, LSQUAREBRACE, expression, RSQUAREBRACE
{ CurrentSemanticValue.n = new(NodeType.ArrayIndex, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 107: // expression -> LPAREN, expression, RPAREN
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-2].l; }
        break;
      case 108: // expression -> fcall_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 109: // expression -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 110: // expression -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 111: // expression -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 112: // expression -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 113: // expression -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 114: // expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 115: // expression -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 116: // fcall_expr -> identifier, LPAREN, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-3].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 117: // fcall_expr -> identifier, LPAREN, fcall_argument_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 118: // fcall_argument_list -> fcall_argument_list, TCOMMA, fcall_argument_item
{ CurrentSemanticValue.n = new(NodeType.ArgumentList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 119: // fcall_argument_list -> fcall_argument_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 120: // fcall_argument_item -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 121: // simple_expr -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 122: // simple_expr -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 123: // simple_expr -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 124: // simple_expr -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 125: // simple_expr -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 126: // simple_expr -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 127: // simple_expr -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 128: // identifier -> TIDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 129: // placeholder -> TPLACEHOLDER
{ CurrentSemanticValue.n = new(NodeType.Placeholder, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 130: // int -> TDIGIT
{ CurrentSemanticValue.n = new(NodeType.IntegerType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 131: // float -> TFLOAT
{ CurrentSemanticValue.n = new(NodeType.FloatType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 132: // boolean -> TTRUE
{ CurrentSemanticValue.n = new(NodeType.BooleanType, null, null, null, null, null, null, "true", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 133: // boolean -> TFALSE
{ CurrentSemanticValue.n = new(NodeType.BooleanType, null, null, null, null, null, null, "false", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 134: // string -> TSTRING
{ CurrentSemanticValue.n = new(NodeType.StringType, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 135: // null -> TNULL
{ CurrentSemanticValue.n = new(NodeType.NullType, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
