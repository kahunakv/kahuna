// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 3/22/2025 4:37:56 PM
// Input file <ScriptParser/ScriptParser.Language.grammar.y - 3/22/2025 11:22:42 AM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Kahuna.Server.ScriptParser
{
internal enum Token {error=2,EOF=3,TOR=4,TAND=5,TLIKE=6,
    TILIKE=7,TEQUALS=8,TNOTEQUALS=9,TLESSTHAN=10,TGREATERTHAN=11,TLESSTHANEQUALS=12,
    TGREATERTHANEQUALS=13,TADD=14,TMINUS=15,TMULT=16,TDIV=17,TNOT=18,
    LPAREN=19,RPAREN=20,TCOMMA=21,LBRACE=22,RBRACE=23,TBEGIN=24,
    TROLLBACK=25,TCOMMIT=26,TLET=27,TSET=28,TGET=29,TESET=30,
    TEGET=31,TDELETE=32,TEDELETE=33,TEXTEND=34,TEEXTEND=35,TIF=36,
    TELSE=37,TTHEN=38,TEND=39,TNX=40,TXX=41,TEX=42,
    TCMP=43,TCMPREV=44,TRETURN=45,TDIGIT=46,TFLOAT=47,TSTRING=48,
    TIDENTIFIER=49,TESCIDENTIFIER=50,TPLACEHOLDER=51,TTRUE=52,TFALSE=53,TAT=54};

internal partial struct ValueType
{ 
        public NodeAst n;
        public string s;
        public int l;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal partial class scriptParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[85];
  private static State[] states = new State[139];
  private static string[] nonTerms = new string[] {
      "stmt_list", "$accept", "stmt", "set_stmt", "eset_stmt", "get_stmt", "eget_stmt", 
      "delete_stmt", "edelete_stmt", "extend_stmt", "eextend_stmt", "let_stmt", 
      "if_stmt", "begin_stmt", "commit_stmt", "rollback_stmt", "return_stmt", 
      "identifier", "expression", "set_cmp", "int", "set_not_exists", "fcall_expr", 
      "float", "string", "boolean", "fcall_argument_list", "fcall_argument_item", 
      };

  static scriptParser() {
    states[0] = new State(new int[]{28,5,30,71,29,82,27,86,31,99,32,104,33,107,34,110,35,114,36,119,24,128,26,132,25,134,45,136},new int[]{-1,1,-3,138,-4,4,-5,70,-6,81,-7,98,-8,103,-9,106,-10,109,-11,113,-12,117,-13,118,-14,127,-15,131,-16,133,-17,135});
    states[1] = new State(new int[]{3,2,28,5,30,71,29,82,27,86,31,99,32,104,33,107,34,110,35,114,36,119,24,128,26,132,25,134,45,136},new int[]{-3,3,-4,4,-5,70,-6,81,-7,98,-8,103,-9,106,-10,109,-11,113,-12,117,-13,118,-14,127,-15,131,-16,133,-17,135});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-4);
    states[5] = new State(new int[]{49,56},new int[]{-18,6});
    states[6] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,7,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[7] = new State(new int[]{42,12,8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40,43,66,44,68,40,15,41,16,3,-18,28,-18,30,-18,29,-18,27,-18,31,-18,32,-18,33,-18,34,-18,35,-18,36,-18,24,-18,26,-18,25,-18,45,-18,39,-18,37,-18},new int[]{-20,8,-22,17});
    states[8] = new State(new int[]{42,9,3,-19,28,-19,30,-19,29,-19,27,-19,31,-19,32,-19,33,-19,34,-19,35,-19,36,-19,24,-19,26,-19,25,-19,45,-19,39,-19,37,-19});
    states[9] = new State(new int[]{46,11},new int[]{-21,10});
    states[10] = new State(-21);
    states[11] = new State(-80);
    states[12] = new State(new int[]{46,11},new int[]{-21,13});
    states[13] = new State(new int[]{40,15,41,16,3,-20,28,-20,30,-20,29,-20,27,-20,31,-20,32,-20,33,-20,34,-20,35,-20,36,-20,24,-20,26,-20,25,-20,45,-20,39,-20,37,-20},new int[]{-22,14});
    states[14] = new State(-22);
    states[15] = new State(-24);
    states[16] = new State(-25);
    states[17] = new State(-23);
    states[18] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,19,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[19] = new State(new int[]{8,-54,9,-54,10,22,11,24,12,26,13,28,5,-54,4,-54,14,34,15,36,16,38,17,40,42,-54,43,-54,44,-54,40,-54,41,-54,3,-54,28,-54,30,-54,29,-54,27,-54,31,-54,32,-54,33,-54,34,-54,35,-54,36,-54,24,-54,26,-54,25,-54,45,-54,39,-54,37,-54,20,-54,21,-54,38,-54});
    states[20] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,21,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[21] = new State(new int[]{8,-55,9,-55,10,22,11,24,12,26,13,28,5,-55,4,-55,14,34,15,36,16,38,17,40,42,-55,43,-55,44,-55,40,-55,41,-55,3,-55,28,-55,30,-55,29,-55,27,-55,31,-55,32,-55,33,-55,34,-55,35,-55,36,-55,24,-55,26,-55,25,-55,45,-55,39,-55,37,-55,20,-55,21,-55,38,-55});
    states[22] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,23,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[23] = new State(new int[]{8,-56,9,-56,10,-56,11,-56,12,-56,13,-56,5,-56,4,-56,14,34,15,36,16,38,17,40,42,-56,43,-56,44,-56,40,-56,41,-56,3,-56,28,-56,30,-56,29,-56,27,-56,31,-56,32,-56,33,-56,34,-56,35,-56,36,-56,24,-56,26,-56,25,-56,45,-56,39,-56,37,-56,20,-56,21,-56,38,-56});
    states[24] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,25,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[25] = new State(new int[]{8,-57,9,-57,10,-57,11,-57,12,-57,13,-57,5,-57,4,-57,14,34,15,36,16,38,17,40,42,-57,43,-57,44,-57,40,-57,41,-57,3,-57,28,-57,30,-57,29,-57,27,-57,31,-57,32,-57,33,-57,34,-57,35,-57,36,-57,24,-57,26,-57,25,-57,45,-57,39,-57,37,-57,20,-57,21,-57,38,-57});
    states[26] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,27,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[27] = new State(new int[]{8,-58,9,-58,10,-58,11,-58,12,-58,13,-58,5,-58,4,-58,14,34,15,36,16,38,17,40,42,-58,43,-58,44,-58,40,-58,41,-58,3,-58,28,-58,30,-58,29,-58,27,-58,31,-58,32,-58,33,-58,34,-58,35,-58,36,-58,24,-58,26,-58,25,-58,45,-58,39,-58,37,-58,20,-58,21,-58,38,-58});
    states[28] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,29,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[29] = new State(new int[]{8,-59,9,-59,10,-59,11,-59,12,-59,13,-59,5,-59,4,-59,14,34,15,36,16,38,17,40,42,-59,43,-59,44,-59,40,-59,41,-59,3,-59,28,-59,30,-59,29,-59,27,-59,31,-59,32,-59,33,-59,34,-59,35,-59,36,-59,24,-59,26,-59,25,-59,45,-59,39,-59,37,-59,20,-59,21,-59,38,-59});
    states[30] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,31,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[31] = new State(new int[]{8,18,9,20,10,22,11,24,12,26,13,28,5,-60,4,-60,14,34,15,36,16,38,17,40,42,-60,43,-60,44,-60,40,-60,41,-60,3,-60,28,-60,30,-60,29,-60,27,-60,31,-60,32,-60,33,-60,34,-60,35,-60,36,-60,24,-60,26,-60,25,-60,45,-60,39,-60,37,-60,20,-60,21,-60,38,-60});
    states[32] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,33,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[33] = new State(new int[]{8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,-61,14,34,15,36,16,38,17,40,42,-61,43,-61,44,-61,40,-61,41,-61,3,-61,28,-61,30,-61,29,-61,27,-61,31,-61,32,-61,33,-61,34,-61,35,-61,36,-61,24,-61,26,-61,25,-61,45,-61,39,-61,37,-61,20,-61,21,-61,38,-61});
    states[34] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,35,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[35] = new State(new int[]{8,-62,9,-62,10,-62,11,-62,12,-62,13,-62,5,-62,4,-62,14,-62,15,-62,16,38,17,40,42,-62,43,-62,44,-62,40,-62,41,-62,3,-62,28,-62,30,-62,29,-62,27,-62,31,-62,32,-62,33,-62,34,-62,35,-62,36,-62,24,-62,26,-62,25,-62,45,-62,39,-62,37,-62,20,-62,21,-62,38,-62});
    states[36] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,37,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[37] = new State(new int[]{8,-63,9,-63,10,-63,11,-63,12,-63,13,-63,5,-63,4,-63,14,-63,15,-63,16,38,17,40,42,-63,43,-63,44,-63,40,-63,41,-63,3,-63,28,-63,30,-63,29,-63,27,-63,31,-63,32,-63,33,-63,34,-63,35,-63,36,-63,24,-63,26,-63,25,-63,45,-63,39,-63,37,-63,20,-63,21,-63,38,-63});
    states[38] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,39,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[39] = new State(-64);
    states[40] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,41,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[41] = new State(-65);
    states[42] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,43,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[43] = new State(-66);
    states[44] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,45,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[45] = new State(new int[]{20,46,8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40});
    states[46] = new State(-67);
    states[47] = new State(-68);
    states[48] = new State(new int[]{19,49,42,-69,8,-69,9,-69,10,-69,11,-69,12,-69,13,-69,5,-69,4,-69,14,-69,15,-69,16,-69,17,-69,43,-69,44,-69,40,-69,41,-69,3,-69,28,-69,30,-69,29,-69,27,-69,31,-69,32,-69,33,-69,34,-69,35,-69,36,-69,24,-69,26,-69,25,-69,45,-69,39,-69,37,-69,20,-69,21,-69,38,-69});
    states[49] = new State(new int[]{20,50,18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-27,51,-28,65,-19,55,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[50] = new State(-74);
    states[51] = new State(new int[]{20,52,21,53});
    states[52] = new State(-75);
    states[53] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-28,54,-19,55,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[54] = new State(-76);
    states[55] = new State(new int[]{8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40,20,-78,21,-78});
    states[56] = new State(-79);
    states[57] = new State(-70);
    states[58] = new State(-71);
    states[59] = new State(-81);
    states[60] = new State(-72);
    states[61] = new State(-84);
    states[62] = new State(-73);
    states[63] = new State(-82);
    states[64] = new State(-83);
    states[65] = new State(-77);
    states[66] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,67,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[67] = new State(new int[]{8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40,42,-26,3,-26,28,-26,30,-26,29,-26,27,-26,31,-26,32,-26,33,-26,34,-26,35,-26,36,-26,24,-26,26,-26,25,-26,45,-26,39,-26,37,-26});
    states[68] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,69,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[69] = new State(new int[]{8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40,42,-27,3,-27,28,-27,30,-27,29,-27,27,-27,31,-27,32,-27,33,-27,34,-27,35,-27,36,-27,24,-27,26,-27,25,-27,45,-27,39,-27,37,-27});
    states[70] = new State(-5);
    states[71] = new State(new int[]{49,56},new int[]{-18,72});
    states[72] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,73,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[73] = new State(new int[]{42,77,8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40,43,66,44,68,40,15,41,16,3,-28,28,-28,30,-28,29,-28,27,-28,31,-28,32,-28,33,-28,34,-28,35,-28,36,-28,24,-28,26,-28,25,-28,45,-28,39,-28,37,-28},new int[]{-20,74,-22,80});
    states[74] = new State(new int[]{42,75,3,-29,28,-29,30,-29,29,-29,27,-29,31,-29,32,-29,33,-29,34,-29,35,-29,36,-29,24,-29,26,-29,25,-29,45,-29,39,-29,37,-29});
    states[75] = new State(new int[]{46,11},new int[]{-21,76});
    states[76] = new State(-31);
    states[77] = new State(new int[]{46,11},new int[]{-21,78});
    states[78] = new State(new int[]{40,15,41,16,3,-30,28,-30,30,-30,29,-30,27,-30,31,-30,32,-30,33,-30,34,-30,35,-30,36,-30,24,-30,26,-30,25,-30,45,-30,39,-30,37,-30},new int[]{-22,79});
    states[79] = new State(-32);
    states[80] = new State(-33);
    states[81] = new State(-6);
    states[82] = new State(new int[]{49,56},new int[]{-18,83});
    states[83] = new State(new int[]{54,84,3,-34,28,-34,30,-34,29,-34,27,-34,31,-34,32,-34,33,-34,34,-34,35,-34,36,-34,24,-34,26,-34,25,-34,45,-34,39,-34,37,-34});
    states[84] = new State(new int[]{46,11},new int[]{-21,85});
    states[85] = new State(-36);
    states[86] = new State(new int[]{49,56},new int[]{-18,87});
    states[87] = new State(new int[]{8,88});
    states[88] = new State(new int[]{29,89,31,93,18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,97,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[89] = new State(new int[]{49,56},new int[]{-18,90});
    states[90] = new State(new int[]{54,91,3,-35,28,-35,30,-35,29,-35,27,-35,31,-35,32,-35,33,-35,34,-35,35,-35,36,-35,24,-35,26,-35,25,-35,45,-35,39,-35,37,-35});
    states[91] = new State(new int[]{46,11},new int[]{-21,92});
    states[92] = new State(-37);
    states[93] = new State(new int[]{49,56},new int[]{-18,94});
    states[94] = new State(new int[]{54,95,3,-39,28,-39,30,-39,29,-39,27,-39,31,-39,32,-39,33,-39,34,-39,35,-39,36,-39,24,-39,26,-39,25,-39,45,-39,39,-39,37,-39});
    states[95] = new State(new int[]{46,11},new int[]{-21,96});
    states[96] = new State(-41);
    states[97] = new State(new int[]{8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40,3,-46,28,-46,30,-46,29,-46,27,-46,31,-46,32,-46,33,-46,34,-46,35,-46,36,-46,24,-46,26,-46,25,-46,45,-46,39,-46,37,-46});
    states[98] = new State(-7);
    states[99] = new State(new int[]{49,56},new int[]{-18,100});
    states[100] = new State(new int[]{54,101,3,-38,28,-38,30,-38,29,-38,27,-38,31,-38,32,-38,33,-38,34,-38,35,-38,36,-38,24,-38,26,-38,25,-38,45,-38,39,-38,37,-38});
    states[101] = new State(new int[]{46,11},new int[]{-21,102});
    states[102] = new State(-40);
    states[103] = new State(-8);
    states[104] = new State(new int[]{49,56},new int[]{-18,105});
    states[105] = new State(-42);
    states[106] = new State(-9);
    states[107] = new State(new int[]{49,56},new int[]{-18,108});
    states[108] = new State(-43);
    states[109] = new State(-10);
    states[110] = new State(new int[]{49,56},new int[]{-18,111});
    states[111] = new State(new int[]{46,11},new int[]{-21,112});
    states[112] = new State(-44);
    states[113] = new State(-11);
    states[114] = new State(new int[]{49,56},new int[]{-18,115});
    states[115] = new State(new int[]{46,11},new int[]{-21,116});
    states[116] = new State(-45);
    states[117] = new State(-12);
    states[118] = new State(-13);
    states[119] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64},new int[]{-19,120,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[120] = new State(new int[]{38,121,8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40});
    states[121] = new State(new int[]{28,5,30,71,29,82,27,86,31,99,32,104,33,107,34,110,35,114,36,119,24,128,26,132,25,134,45,136},new int[]{-1,122,-3,138,-4,4,-5,70,-6,81,-7,98,-8,103,-9,106,-10,109,-11,113,-12,117,-13,118,-14,127,-15,131,-16,133,-17,135});
    states[122] = new State(new int[]{39,123,37,124,28,5,30,71,29,82,27,86,31,99,32,104,33,107,34,110,35,114,36,119,24,128,26,132,25,134,45,136},new int[]{-3,3,-4,4,-5,70,-6,81,-7,98,-8,103,-9,106,-10,109,-11,113,-12,117,-13,118,-14,127,-15,131,-16,133,-17,135});
    states[123] = new State(-47);
    states[124] = new State(new int[]{28,5,30,71,29,82,27,86,31,99,32,104,33,107,34,110,35,114,36,119,24,128,26,132,25,134,45,136},new int[]{-1,125,-3,138,-4,4,-5,70,-6,81,-7,98,-8,103,-9,106,-10,109,-11,113,-12,117,-13,118,-14,127,-15,131,-16,133,-17,135});
    states[125] = new State(new int[]{39,126,28,5,30,71,29,82,27,86,31,99,32,104,33,107,34,110,35,114,36,119,24,128,26,132,25,134,45,136},new int[]{-3,3,-4,4,-5,70,-6,81,-7,98,-8,103,-9,106,-10,109,-11,113,-12,117,-13,118,-14,127,-15,131,-16,133,-17,135});
    states[126] = new State(-48);
    states[127] = new State(-14);
    states[128] = new State(new int[]{28,5,30,71,29,82,27,86,31,99,32,104,33,107,34,110,35,114,36,119,24,128,26,132,25,134,45,136},new int[]{-1,129,-3,138,-4,4,-5,70,-6,81,-7,98,-8,103,-9,106,-10,109,-11,113,-12,117,-13,118,-14,127,-15,131,-16,133,-17,135});
    states[129] = new State(new int[]{39,130,28,5,30,71,29,82,27,86,31,99,32,104,33,107,34,110,35,114,36,119,24,128,26,132,25,134,45,136},new int[]{-3,3,-4,4,-5,70,-6,81,-7,98,-8,103,-9,106,-10,109,-11,113,-12,117,-13,118,-14,127,-15,131,-16,133,-17,135});
    states[130] = new State(-49);
    states[131] = new State(-15);
    states[132] = new State(-50);
    states[133] = new State(-16);
    states[134] = new State(-51);
    states[135] = new State(-17);
    states[136] = new State(new int[]{18,42,19,44,49,56,46,11,47,59,48,61,52,63,53,64,3,-53,28,-53,30,-53,29,-53,27,-53,31,-53,32,-53,33,-53,34,-53,35,-53,36,-53,24,-53,26,-53,25,-53,45,-53,39,-53,37,-53},new int[]{-19,137,-23,47,-18,48,-21,57,-24,58,-25,60,-26,62});
    states[137] = new State(new int[]{8,18,9,20,10,22,11,24,12,26,13,28,5,30,4,32,14,34,15,36,16,38,17,40,3,-52,28,-52,30,-52,29,-52,27,-52,31,-52,32,-52,33,-52,34,-52,35,-52,36,-52,24,-52,26,-52,25,-52,45,-52,39,-52,37,-52});
    states[138] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-6});
    rules[7] = new Rule(-3, new int[]{-7});
    rules[8] = new Rule(-3, new int[]{-8});
    rules[9] = new Rule(-3, new int[]{-9});
    rules[10] = new Rule(-3, new int[]{-10});
    rules[11] = new Rule(-3, new int[]{-11});
    rules[12] = new Rule(-3, new int[]{-12});
    rules[13] = new Rule(-3, new int[]{-13});
    rules[14] = new Rule(-3, new int[]{-14});
    rules[15] = new Rule(-3, new int[]{-15});
    rules[16] = new Rule(-3, new int[]{-16});
    rules[17] = new Rule(-3, new int[]{-17});
    rules[18] = new Rule(-4, new int[]{28,-18,-19});
    rules[19] = new Rule(-4, new int[]{28,-18,-19,-20});
    rules[20] = new Rule(-4, new int[]{28,-18,-19,42,-21});
    rules[21] = new Rule(-4, new int[]{28,-18,-19,-20,42,-21});
    rules[22] = new Rule(-4, new int[]{28,-18,-19,42,-21,-22});
    rules[23] = new Rule(-4, new int[]{28,-18,-19,-22});
    rules[24] = new Rule(-22, new int[]{40});
    rules[25] = new Rule(-22, new int[]{41});
    rules[26] = new Rule(-20, new int[]{43,-19});
    rules[27] = new Rule(-20, new int[]{44,-19});
    rules[28] = new Rule(-5, new int[]{30,-18,-19});
    rules[29] = new Rule(-5, new int[]{30,-18,-19,-20});
    rules[30] = new Rule(-5, new int[]{30,-18,-19,42,-21});
    rules[31] = new Rule(-5, new int[]{30,-18,-19,-20,42,-21});
    rules[32] = new Rule(-5, new int[]{30,-18,-19,42,-21,-22});
    rules[33] = new Rule(-5, new int[]{30,-18,-19,-22});
    rules[34] = new Rule(-6, new int[]{29,-18});
    rules[35] = new Rule(-6, new int[]{27,-18,8,29,-18});
    rules[36] = new Rule(-6, new int[]{29,-18,54,-21});
    rules[37] = new Rule(-6, new int[]{27,-18,8,29,-18,54,-21});
    rules[38] = new Rule(-7, new int[]{31,-18});
    rules[39] = new Rule(-7, new int[]{27,-18,8,31,-18});
    rules[40] = new Rule(-7, new int[]{31,-18,54,-21});
    rules[41] = new Rule(-7, new int[]{27,-18,8,31,-18,54,-21});
    rules[42] = new Rule(-8, new int[]{32,-18});
    rules[43] = new Rule(-9, new int[]{33,-18});
    rules[44] = new Rule(-10, new int[]{34,-18,-21});
    rules[45] = new Rule(-11, new int[]{35,-18,-21});
    rules[46] = new Rule(-12, new int[]{27,-18,8,-19});
    rules[47] = new Rule(-13, new int[]{36,-19,38,-1,39});
    rules[48] = new Rule(-13, new int[]{36,-19,38,-1,37,-1,39});
    rules[49] = new Rule(-14, new int[]{24,-1,39});
    rules[50] = new Rule(-15, new int[]{26});
    rules[51] = new Rule(-16, new int[]{25});
    rules[52] = new Rule(-17, new int[]{45,-19});
    rules[53] = new Rule(-17, new int[]{45});
    rules[54] = new Rule(-19, new int[]{-19,8,-19});
    rules[55] = new Rule(-19, new int[]{-19,9,-19});
    rules[56] = new Rule(-19, new int[]{-19,10,-19});
    rules[57] = new Rule(-19, new int[]{-19,11,-19});
    rules[58] = new Rule(-19, new int[]{-19,12,-19});
    rules[59] = new Rule(-19, new int[]{-19,13,-19});
    rules[60] = new Rule(-19, new int[]{-19,5,-19});
    rules[61] = new Rule(-19, new int[]{-19,4,-19});
    rules[62] = new Rule(-19, new int[]{-19,14,-19});
    rules[63] = new Rule(-19, new int[]{-19,15,-19});
    rules[64] = new Rule(-19, new int[]{-19,16,-19});
    rules[65] = new Rule(-19, new int[]{-19,17,-19});
    rules[66] = new Rule(-19, new int[]{18,-19});
    rules[67] = new Rule(-19, new int[]{19,-19,20});
    rules[68] = new Rule(-19, new int[]{-23});
    rules[69] = new Rule(-19, new int[]{-18});
    rules[70] = new Rule(-19, new int[]{-21});
    rules[71] = new Rule(-19, new int[]{-24});
    rules[72] = new Rule(-19, new int[]{-25});
    rules[73] = new Rule(-19, new int[]{-26});
    rules[74] = new Rule(-23, new int[]{-18,19,20});
    rules[75] = new Rule(-23, new int[]{-18,19,-27,20});
    rules[76] = new Rule(-27, new int[]{-27,21,-28});
    rules[77] = new Rule(-27, new int[]{-28});
    rules[78] = new Rule(-28, new int[]{-19});
    rules[79] = new Rule(-18, new int[]{49});
    rules[80] = new Rule(-21, new int[]{46});
    rules[81] = new Rule(-24, new int[]{47});
    rules[82] = new Rule(-26, new int[]{52});
    rules[83] = new Rule(-26, new int[]{53});
    rules[84] = new Rule(-25, new int[]{48});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // stmt_list -> stmt_list, stmt
{ CurrentSemanticValue.n = new(NodeType.StmtList, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 3: // stmt_list -> stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 4: // stmt -> set_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 5: // stmt -> eset_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 6: // stmt -> get_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 7: // stmt -> eget_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 8: // stmt -> delete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 9: // stmt -> edelete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 10: // stmt -> extend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 11: // stmt -> eextend_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 12: // stmt -> let_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 13: // stmt -> if_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 14: // stmt -> begin_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 15: // stmt -> commit_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 16: // stmt -> rollback_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 17: // stmt -> return_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 18: // set_stmt -> TSET, identifier, expression
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 19: // set_stmt -> TSET, identifier, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 20: // set_stmt -> TSET, identifier, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 21: // set_stmt -> TSET, identifier, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 22: // set_stmt -> TSET, identifier, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 23: // set_stmt -> TSET, identifier, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Set, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 24: // set_not_exists -> TNX
{ CurrentSemanticValue.n = new(NodeType.SetNotExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 25: // set_not_exists -> TXX
{ CurrentSemanticValue.n = new(NodeType.SetExists, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 26: // set_cmp -> TCMP, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmp, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 27: // set_cmp -> TCMPREV, expression
{ CurrentSemanticValue.n = new(NodeType.SetCmpRev, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 28: // eset_stmt -> TESET, identifier, expression
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 29: // eset_stmt -> TESET, identifier, expression, set_cmp
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 30: // eset_stmt -> TESET, identifier, expression, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 31: // eset_stmt -> TESET, identifier, expression, set_cmp, TEX, int
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 32: // eset_stmt -> TESET, identifier, expression, TEX, int, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-6].l); }
        break;
      case 33: // eset_stmt -> TESET, identifier, expression, set_not_exists
{ CurrentSemanticValue.n = new(NodeType.Eset, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 34: // get_stmt -> TGET, identifier
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 35: // get_stmt -> TLET, identifier, TEQUALS, TGET, identifier
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 36: // get_stmt -> TGET, identifier, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 37: // get_stmt -> TLET, identifier, TEQUALS, TGET, identifier, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Get, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 38: // eget_stmt -> TEGET, identifier
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 39: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, identifier
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-1].n, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 40: // eget_stmt -> TEGET, identifier, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 41: // eget_stmt -> TLET, identifier, TEQUALS, TEGET, identifier, TAT, int
{ CurrentSemanticValue.n = new(NodeType.Eget, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 42: // delete_stmt -> TDELETE, identifier
{ CurrentSemanticValue.n = new(NodeType.Delete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 43: // edelete_stmt -> TEDELETE, identifier
{ CurrentSemanticValue.n = new(NodeType.Edelete, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 44: // extend_stmt -> TEXTEND, identifier, int
{ CurrentSemanticValue.n = new(NodeType.Extend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 45: // eextend_stmt -> TEEXTEND, identifier, int
{ CurrentSemanticValue.n = new(NodeType.Eextend, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 46: // let_stmt -> TLET, identifier, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Let, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 47: // if_stmt -> TIF, expression, TTHEN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-5].l); }
        break;
      case 48: // if_stmt -> TIF, expression, TTHEN, stmt_list, TELSE, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.If, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, ValueStack[ValueStack.Depth-7].l); }
        break;
      case 49: // begin_stmt -> TBEGIN, stmt_list, TEND
{ CurrentSemanticValue.n = new(NodeType.Begin, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 50: // commit_stmt -> TCOMMIT
{ CurrentSemanticValue.n = new(NodeType.Commit, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 51: // rollback_stmt -> TROLLBACK
{ CurrentSemanticValue.n = new(NodeType.Rollback, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 52: // return_stmt -> TRETURN, expression
{ CurrentSemanticValue.n = new(NodeType.Return, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 53: // return_stmt -> TRETURN
{ CurrentSemanticValue.n = new(NodeType.Return, null, null, null, null, null, null, null, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 54: // expression -> expression, TEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.Equals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 55: // expression -> expression, TNOTEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.NotEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 56: // expression -> expression, TLESSTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.LessThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 57: // expression -> expression, TGREATERTHAN, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 58: // expression -> expression, TLESSTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.LessThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 59: // expression -> expression, TGREATERTHANEQUALS, expression
{ CurrentSemanticValue.n = new(NodeType.GreaterThanEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 60: // expression -> expression, TAND, expression
{ CurrentSemanticValue.n = new(NodeType.And, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 61: // expression -> expression, TOR, expression
{ CurrentSemanticValue.n = new(NodeType.Or, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 62: // expression -> expression, TADD, expression
{ CurrentSemanticValue.n = new(NodeType.Add, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 63: // expression -> expression, TMINUS, expression
{ CurrentSemanticValue.n = new(NodeType.Subtract, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 64: // expression -> expression, TMULT, expression
{ CurrentSemanticValue.n = new(NodeType.Mult, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 65: // expression -> expression, TDIV, expression
{ CurrentSemanticValue.n = new(NodeType.Div, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 66: // expression -> TNOT, expression
{ CurrentSemanticValue.n = new(NodeType.Not, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-2].l); }
        break;
      case 67: // expression -> LPAREN, expression, RPAREN
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-2].l; }
        break;
      case 68: // expression -> fcall_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 69: // expression -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 70: // expression -> int
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 71: // expression -> float
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 72: // expression -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 73: // expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 74: // fcall_expr -> identifier, LPAREN, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-3].n, null, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 75: // fcall_expr -> identifier, LPAREN, fcall_argument_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.FuncCall, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, ValueStack[ValueStack.Depth-4].l); }
        break;
      case 76: // fcall_argument_list -> fcall_argument_list, TCOMMA, fcall_argument_item
{ CurrentSemanticValue.n = new(NodeType.ArgumentList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, ValueStack[ValueStack.Depth-3].l); }
        break;
      case 77: // fcall_argument_list -> fcall_argument_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 78: // fcall_argument_item -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; CurrentSemanticValue.l = ValueStack[ValueStack.Depth-1].l; }
        break;
      case 79: // identifier -> TIDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 80: // int -> TDIGIT
{ CurrentSemanticValue.n = new(NodeType.Integer, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 81: // float -> TFLOAT
{ CurrentSemanticValue.n = new(NodeType.Float, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
      case 82: // boolean -> TTRUE
{ CurrentSemanticValue.n = new(NodeType.Boolean, null, null, null, null, null, null, "true", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 83: // boolean -> TFALSE
{ CurrentSemanticValue.n = new(NodeType.Boolean, null, null, null, null, null, null, "false", ValueStack[ValueStack.Depth-1].l); }
        break;
      case 84: // string -> TSTRING
{ CurrentSemanticValue.n = new(NodeType.String, null, null, null, null, null, null, CurrentSemanticValue.s, ValueStack[ValueStack.Depth-1].l); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
